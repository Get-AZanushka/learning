{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "mdw-customerdemo-synapse"
		},
		"AzureSynapseAnalytics1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics1'"
		},
		"amlblob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'amlblob'"
		},
		"azureblobaml_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'azureblobaml'"
		},
		"mdw-customerdemo-synapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'mdw-customerdemo-synapse-WorkspaceDefaultSqlServer'"
		},
		"mdw_sampledata_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'mdw_sampledata'"
		},
		"mdwsampledata_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'mdwsampledata'"
		},
		"covid-tracking_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'covid-tracking'"
		},
		"mdw-customerdemo-synapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://mdwsampledata.dfs.core.windows.net"
		},
		"mdw_sampledata_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://mdwsampledata.dfs.core.windows.net"
		},
		"mdwsampledata_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://mdwsampledata.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/F0_ChannelType_Territory_Channel')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "L0_ChannelType_Territory",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L0_ChannelType_Territory",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "L1_Channel",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "L0_ChannelType_Territory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L1_Channel",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T16:12:16Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/L0_ChannelType_Territory')]",
				"[concat(variables('workspaceId'), '/pipelines/L1_Channel')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F1_Country_Country2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "L0_Country",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L0_Country",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "L1_Country1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "L0_Country",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L1_Country2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T16:12:22Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/L0_Country')]",
				"[concat(variables('workspaceId'), '/pipelines/L1_Country2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F3_Item_ProductCategoryDim_Product_TransactionLineItem')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "L0_Item_ProductCategoryDim",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L0_Item_ProductCategoryDim",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "L1_Product",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "L0_Item_ProductCategoryDim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L1_Product",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "L2_TransactionLineItem",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "L1_Product",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L2_TransactionLineItem",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T16:12:33Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/L0_Item_ProductCategoryDim')]",
				"[concat(variables('workspaceId'), '/pipelines/L1_Product')]",
				"[concat(variables('workspaceId'), '/pipelines/L2_TransactionLineItem')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/F4_Location_Location1_Customer_Transaction')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "L0_Location",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L0_Location",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "L1_Location1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "L0_Location",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L1_Location2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "L2_Customer",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "L1_Location1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L2_Customer",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "L3_Transaction",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "L2_Customer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L3_Transaction",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T16:12:29Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/L0_Location')]",
				"[concat(variables('workspaceId'), '/pipelines/L1_Location2')]",
				"[concat(variables('workspaceId'), '/pipelines/L2_Customer')]",
				"[concat(variables('workspaceId'), '/pipelines/L3_Transaction')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L0_ChannelType_Territory')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ChannelTypeTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ChannelType_DataFlow11",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"ResellerDeltaSource": {},
									"TargetChannelType": {},
									"ChannelTypeSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TerritoryTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Territory_DataFlow11",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"SalesTerritoryDeltaSource": {},
									"TerritorySink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T16:11:08Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/ChannelType_DataFlow11')]",
				"[concat(variables('workspaceId'), '/dataflows/Territory_DataFlow11')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L0_Country')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "CountryTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Country_DataFlow11",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"CustomerDataDeltaSource": {},
									"TargetCountry": {},
									"CountrySink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T16:11:18Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Country_DataFlow11')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L0_IndividualCustomer')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "IndividualCustomerTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "IndividualCustomer_DataFlow11",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"CustomerDataDeltaSource": {},
									"IndividualCustomerSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T16:11:04Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/IndividualCustomer_DataFlow11')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L0_Item_ProductCategoryDim')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ItemTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Item_DataFlow11",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"ProductDataDeltaSource": {},
									"ItemSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ProductCategoryDimTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ProductCategoryDim_DataFlow11",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"ProductDataDeltaSource": {},
									"ProductCategoryDimSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T16:11:59Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Item_DataFlow11')]",
				"[concat(variables('workspaceId'), '/dataflows/ProductCategoryDim_DataFlow11')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L0_Location')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LocationTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Location_DataFlow11",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"CustomerDataDeltaSource": {},
									"TargetCountry": {},
									"TargetLocation": {},
									"LocationSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T16:11:34Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Location_DataFlow11')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L1_Channel')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ChannelTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Channel_DataFlow11",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"ResellerDeltaSource": {},
									"SalesSource": {},
									"SalesTerritorySource": {},
									"TargetChannelType": {},
									"ChannelSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T16:11:12Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Channel_DataFlow11')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L1_Country2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Country2Transform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Country2_DataFlow11",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"ResellerDeltaSource": {},
									"TargetCountry": {},
									"CountrySink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T16:11:25Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Country2_DataFlow11')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L1_Location2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Location2Transform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Location2_DataFlow11",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"ResellerDeltaSource": {},
									"TargetCountry": {},
									"TargetLocation": {},
									"LocationSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T16:11:41Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Location2_DataFlow11')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L1_Product')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ProductTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Product_DataFlow11",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"ProductDataDeltaSource": {},
									"ProductSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T16:12:04Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Product_DataFlow11')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L2_Customer')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "CustomerTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Customer_DataFlow11",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"CustomerDataDeltaSource": {},
									"TargetCountry": {},
									"TargetLocation": {},
									"CustomerSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T16:11:46Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Customer_DataFlow11')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L2_TransactionLineItem')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "TransactionLineItemTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TransactionLineItem_DataFlow11",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"SalesDeltaSource": {},
									"SalesOrderSource": {},
									"TransactionLineItemSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T16:12:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/TransactionLineItem_DataFlow11')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/L3_Transaction')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "TransactionTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Transaction_DataFlow11",
								"type": "DataFlowReference",
								"parameters": {
									"modifiedAfter": "toTimestamp(\"01-01-1900\")",
									"modifiedBefore": "currentTimestamp()"
								},
								"datasetParameters": {
									"SalesOrderDeltaSource": {},
									"SalesSource": {},
									"CustomerDataSource": {},
									"ResellerSource": {},
									"TransactionSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T16:11:52Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Transaction_DataFlow11')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/StartingPipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "F0_ChannelType_Territory_Channel",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "L0_IndividualCustomer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "F0_ChannelType_Territory_Channel",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "F1_Country_Country1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "F0_ChannelType_Territory_Channel",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "F1_Country_Country2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "F4_Location_Location1_Customer_Transacti",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "F1_Country_Country1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "F4_Location_Location1_Customer_Transaction",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "F3_Item_ProductCategoryDim_Product_Trans",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "F4_Location_Location1_Customer_Transacti",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "F3_Item_ProductCategoryDim_Product_TransactionLineItem",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "L0_IndividualCustomer",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L0_IndividualCustomer",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "AdventureWorksPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T16:12:39Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/F0_ChannelType_Territory_Channel')]",
				"[concat(variables('workspaceId'), '/pipelines/F1_Country_Country2')]",
				"[concat(variables('workspaceId'), '/pipelines/F4_Location_Location1_Customer_Transaction')]",
				"[concat(variables('workspaceId'), '/pipelines/F3_Item_ProductCategoryDim_Product_TransactionLineItem')]",
				"[concat(variables('workspaceId'), '/pipelines/L0_IndividualCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/samplepurviewlineage')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "purview-sample",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "samplelineage",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"advworkscustomer": {},
									"advworksorders": {},
									"sink1": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "mdw_sampledata",
									"type": "LinkedServiceReference"
								},
								"folderPath": "mdwsynapsews"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-30T19:12:08Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/samplelineage')]",
				"[concat(variables('workspaceId'), '/linkedServices/mdw_sampledata')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mdw_sampledata",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "mdwsynapsews"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/mdw_sampledata')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mdw_sampledata",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "mdwsynapsews"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/mdw_sampledata')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/donordata')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mdw_sampledata",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Donations_to_Not-for-Profit_Organizations_Affiliated_with_Elected_Officials.csv",
						"fileSystem": "donationdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/mdw_sampledata')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/volunteerdata')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "mdw_sampledata",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "2019_Volunteers_Count_Report_-_Neighborhoods.csv",
						"folderPath": "newyork",
						"fileSystem": "volunteerdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/mdw_sampledata')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalytics1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "adventureworks db",
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/amlblob')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('amlblob_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/azureblobaml')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('azureblobaml_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/covid-tracking')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('covid-tracking_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mdw-customerdemo-synapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('mdw-customerdemo-synapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mdw-customerdemo-synapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('mdw-customerdemo-synapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mdw_sampledata')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('mdw_sampledata_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('mdw_sampledata_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mdwsampledata')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('mdwsampledata_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('mdwsampledata_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ChannelType_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ResellerDeltaSource"
						},
						{
							"name": "TargetChannelType"
						}
					],
					"sinks": [
						{
							"name": "ChannelTypeSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ResellerDeltaSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "SelectReseller"
						},
						{
							"name": "PreSKSelectChannelType"
						},
						{
							"name": "Deduplicated1PreSKSelectChannelType"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "Deduplicated1TargetChannelType"
						},
						{
							"name": "SelectDeduplicated1TargetChannelType"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "FilterInsertChannelType"
						},
						{
							"name": "InsertChannelType"
						},
						{
							"name": "SkChannelType"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "DerivedChannelType"
						},
						{
							"name": "PostSkChannelType"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "FinalChannelType"
						},
						{
							"name": "ChannelType"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerDeltaSource\nsource(output(\n\t\tChannelTypeId as integer,\n\t\tChannelTypeName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'ChannelType',\n\tmanifestType: 'manifest') ~> TargetChannelType\nResellerDeltaSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerDeltaSource\nDeduplicated1ResellerDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nReseller select(mapColumn(\n\t\tBusinessType\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectReseller\nSelectReseller select(mapColumn(\n\t\tChannelTypeName = BusinessType\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectChannelType\nPreSKSelectChannelType aggregate(groupBy(ChannelTypeName),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectChannelType\nDeduplicated1PreSKSelectChannelType select(mapColumn(\n\t\tChannelTypeName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectChannelType\nTargetChannelType aggregate(groupBy(ChannelTypeId),\n\tChannelTypeName = last(ChannelTypeName)) ~> Deduplicated1TargetChannelType\nDeduplicated1TargetChannelType select(mapColumn(\n\t\tChannelTypeName,\n\t\tChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetChannelType\nSelectDeduplicated1TargetChannelType select(mapColumn(\n\t\tTarChannelTypeName = ChannelTypeName,\n\t\tTarChannelTypeId = ChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetChannelType\nSelectDeduplicated1PreSKSelectChannelType, SelectTarSelectDeduplicated1TargetChannelType join(ChannelTypeName === TarChannelTypeName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetChannelType\nJoinSelectTarSelectDeduplicated1TargetChannelType filter(isNull(TarChannelTypeId)) ~> FilterInsertChannelType\nFilterInsertChannelType select(mapColumn(\n\t\tChannelTypeName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertChannelType\nInsertChannelType keyGenerate(output(Sk_ChannelTypeId as long),\n\tstartAt: 1L) ~> SkChannelType\nSelectTarSelectDeduplicated1TargetChannelType aggregate(Max_TarChannelTypeId = max(toInteger(TarChannelTypeId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetChannelType\nAggregatedSelectTarSelectDeduplicated1TargetChannelType derive(Max_TarChannelTypeId = iif(isNull(Max_TarChannelTypeId),0,Max_TarChannelTypeId)) ~> MaxSelectTarSelectDeduplicated1TargetChannelType\nSkChannelType, MaxSelectTarSelectDeduplicated1TargetChannelType join(true() === true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetChannelType\nJoinMaxSelectTarSelectDeduplicated1TargetChannelType derive(ChannelTypeId = Sk_ChannelTypeId + Max_TarChannelTypeId) ~> DerivedChannelType\nDerivedChannelType select(mapColumn(\n\t\tChannelTypeName,\n\t\tChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkChannelType\nJoinSelectTarSelectDeduplicated1TargetChannelType filter(!isNull(TarChannelTypeId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectChannelType\nFilterUpdateSelectDeduplicated1PreSKSelectChannelType select(mapColumn(\n\t\tChannelTypeName,\n\t\tChannelTypeId = TarChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectChannelType\nPostSkChannelType, UpdateSelectDeduplicated1PreSKSelectChannelType union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectChannelType\nUnionUpdateSelectDeduplicated1PreSKSelectChannelType select(mapColumn(\n\t\tTarChannelTypeName = ChannelTypeName,\n\t\tTarChannelTypeId = ChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType\nPreSKSelectChannelType, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType join(ChannelTypeName === TarChannelTypeName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType select(mapColumn(\n\t\tChannelTypeName,\n\t\tChannelTypeId = TarChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalChannelType\nFinalChannelType aggregate(groupBy(ChannelTypeId),\n\tChannelTypeName = last(ChannelTypeName)) ~> ChannelType\nChannelType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'ChannelType',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ChannelTypeSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ChannelType_DataFlow11')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ResellerDeltaSource"
						},
						{
							"name": "TargetChannelType"
						}
					],
					"sinks": [
						{
							"name": "ChannelTypeSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ResellerDeltaSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "SelectReseller"
						},
						{
							"name": "PreSKSelectChannelType"
						},
						{
							"name": "Deduplicated1PreSKSelectChannelType"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "Deduplicated1TargetChannelType"
						},
						{
							"name": "SelectDeduplicated1TargetChannelType"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "FilterInsertChannelType"
						},
						{
							"name": "InsertChannelType"
						},
						{
							"name": "SkChannelType"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "DerivedChannelType"
						},
						{
							"name": "PostSkChannelType"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "FinalChannelType"
						},
						{
							"name": "ChannelType"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerDeltaSource\nsource(output(\n\t\tChannelTypeId as integer,\n\t\tChannelTypeName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'ChannelType',\n\tmanifestType: 'manifest') ~> TargetChannelType\nResellerDeltaSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerDeltaSource\nDeduplicated1ResellerDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nReseller select(mapColumn(\n\t\tBusinessType\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectReseller\nSelectReseller select(mapColumn(\n\t\tChannelTypeName = BusinessType\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectChannelType\nPreSKSelectChannelType aggregate(groupBy(ChannelTypeName),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectChannelType\nDeduplicated1PreSKSelectChannelType select(mapColumn(\n\t\tChannelTypeName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectChannelType\nTargetChannelType aggregate(groupBy(ChannelTypeId),\n\tChannelTypeName = last(ChannelTypeName)) ~> Deduplicated1TargetChannelType\nDeduplicated1TargetChannelType select(mapColumn(\n\t\tChannelTypeName,\n\t\tChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetChannelType\nSelectDeduplicated1TargetChannelType select(mapColumn(\n\t\tTarChannelTypeName = ChannelTypeName,\n\t\tTarChannelTypeId = ChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetChannelType\nSelectDeduplicated1PreSKSelectChannelType, SelectTarSelectDeduplicated1TargetChannelType join(ChannelTypeName === TarChannelTypeName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetChannelType\nJoinSelectTarSelectDeduplicated1TargetChannelType filter(isNull(TarChannelTypeId)) ~> FilterInsertChannelType\nFilterInsertChannelType select(mapColumn(\n\t\tChannelTypeName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertChannelType\nInsertChannelType keyGenerate(output(Sk_ChannelTypeId as long),\n\tstartAt: 1L) ~> SkChannelType\nSelectTarSelectDeduplicated1TargetChannelType aggregate(Max_TarChannelTypeId = max(toInteger(TarChannelTypeId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetChannelType\nAggregatedSelectTarSelectDeduplicated1TargetChannelType derive(Max_TarChannelTypeId = iif(isNull(Max_TarChannelTypeId),0,Max_TarChannelTypeId)) ~> MaxSelectTarSelectDeduplicated1TargetChannelType\nSkChannelType, MaxSelectTarSelectDeduplicated1TargetChannelType join(true() === true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetChannelType\nJoinMaxSelectTarSelectDeduplicated1TargetChannelType derive(ChannelTypeId = Sk_ChannelTypeId + Max_TarChannelTypeId) ~> DerivedChannelType\nDerivedChannelType select(mapColumn(\n\t\tChannelTypeName,\n\t\tChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkChannelType\nJoinSelectTarSelectDeduplicated1TargetChannelType filter(!isNull(TarChannelTypeId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectChannelType\nFilterUpdateSelectDeduplicated1PreSKSelectChannelType select(mapColumn(\n\t\tChannelTypeName,\n\t\tChannelTypeId = TarChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectChannelType\nPostSkChannelType, UpdateSelectDeduplicated1PreSKSelectChannelType union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectChannelType\nUnionUpdateSelectDeduplicated1PreSKSelectChannelType select(mapColumn(\n\t\tTarChannelTypeName = ChannelTypeName,\n\t\tTarChannelTypeId = ChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType\nPreSKSelectChannelType, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType join(ChannelTypeName === TarChannelTypeName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType select(mapColumn(\n\t\tChannelTypeName,\n\t\tChannelTypeId = TarChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalChannelType\nFinalChannelType aggregate(groupBy(ChannelTypeId),\n\tChannelTypeName = last(ChannelTypeName)) ~> ChannelType\nChannelType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'ChannelType',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ChannelTypeSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Channel_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ResellerDeltaSource"
						},
						{
							"name": "SalesSource"
						},
						{
							"name": "SalesTerritorySource"
						},
						{
							"name": "TargetChannelType"
						}
					],
					"sinks": [
						{
							"name": "ChannelSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ResellerDeltaSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "Deduplicated1SalesSource"
						},
						{
							"name": "Sales"
						},
						{
							"name": "JoinSales"
						},
						{
							"name": "Deduplicated1SalesTerritorySource"
						},
						{
							"name": "SalesTerritory"
						},
						{
							"name": "JoinSalesTerritory"
						},
						{
							"name": "SelectJoinSalesTerritory"
						},
						{
							"name": "Deduplicated1TargetChannelType"
						},
						{
							"name": "SelectChannelType"
						},
						{
							"name": "JoinForChannelTypeId"
						},
						{
							"name": "SelectForChannelTypeId"
						},
						{
							"name": "Channel"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerDeltaSource\nsource(output(\n\t\tSalesAmount as decimal(18,2),\n\t\tTotalProductCost as decimal(18,2),\n\t\tProductStandardCost as decimal(18,2),\n\t\tUnitPriceDiscountPct as decimal(18,2),\n\t\tExtendedAmount as decimal(18,2),\n\t\tUnitPrice as decimal(18,2),\n\t\tOrderQuantity as integer,\n\t\tSalesTerritoryKey as integer,\n\t\tShipDateKey as integer,\n\t\tDueDateKey as integer,\n\t\tOrderDateKey as integer,\n\t\tProductKey as integer,\n\t\tCustomerKey as integer,\n\t\tResellerKey as integer,\n\t\tSalesOrderLineKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Sales',\n\tmanifestType: 'manifest') ~> SalesSource\nsource(output(\n\t\tSalesTerritoryKey as integer,\n\t\tRegion as string,\n\t\tCountry as string,\n\t\tGroup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'SalesTerritory',\n\tmanifestType: 'manifest') ~> SalesTerritorySource\nsource(output(\n\t\tChannelTypeId as integer,\n\t\tChannelTypeName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'ChannelType',\n\tmanifestType: 'manifest') ~> TargetChannelType\nResellerDeltaSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerDeltaSource\nDeduplicated1ResellerDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nSalesSource aggregate(groupBy(ProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey),\n\tSalesAmount = last(SalesAmount),\n\t\tTotalProductCost = last(TotalProductCost),\n\t\tProductStandardCost = last(ProductStandardCost),\n\t\tUnitPriceDiscountPct = last(UnitPriceDiscountPct),\n\t\tExtendedAmount = last(ExtendedAmount),\n\t\tUnitPrice = last(UnitPrice),\n\t\tOrderQuantity = last(OrderQuantity),\n\t\tSalesTerritoryKey = last(SalesTerritoryKey),\n\t\tShipDateKey = last(ShipDateKey),\n\t\tDueDateKey = last(DueDateKey),\n\t\tOrderDateKey = last(OrderDateKey)) ~> Deduplicated1SalesSource\nDeduplicated1SalesSource select(mapColumn(\n\t\tSalesAmount,\n\t\tTotalProductCost,\n\t\tProductStandardCost,\n\t\tUnitPriceDiscountPct,\n\t\tExtendedAmount,\n\t\tUnitPrice,\n\t\tOrderQuantity,\n\t\tSalesTerritoryKey,\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Sales\nReseller, Sales join(Reseller@ResellerKey === Sales@ResellerKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSales\nSalesTerritorySource aggregate(groupBy(SalesTerritoryKey),\n\tGroup = last(Group),\n\t\tCountry = last(Country),\n\t\tRegion = last(Region)) ~> Deduplicated1SalesTerritorySource\nDeduplicated1SalesTerritorySource select(mapColumn(\n\t\tGroup,\n\t\tCountry,\n\t\tRegion,\n\t\tSalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SalesTerritory\nJoinSales, SalesTerritory join(Sales@SalesTerritoryKey === SalesTerritory@SalesTerritoryKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSalesTerritory\nJoinSalesTerritory select(mapColumn(\n\t\tBusinessTypeAlias = BusinessType,\n\t\tReseller_ResellerKey_Generated = Reseller@ResellerKey,\n\t\tResellerId,\n\t\tReseller,\n\t\tSalesTerritory_SalesTerritoryKey_Generated = SalesTerritory@SalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectJoinSalesTerritory\nTargetChannelType aggregate(groupBy(ChannelTypeId),\n\tChannelTypeName = last(ChannelTypeName)) ~> Deduplicated1TargetChannelType\nDeduplicated1TargetChannelType select(mapColumn(\n\t\tChannelTypeId,\n\t\tChannelTypeNameAlias = ChannelTypeName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectChannelType\nSelectJoinSalesTerritory, SelectChannelType join(BusinessTypeAlias === ChannelTypeNameAlias,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinForChannelTypeId\nJoinForChannelTypeId select(mapColumn(\n\t\tBusinessTypeAlias,\n\t\tReseller_ResellerKey_Generated,\n\t\tResellerId,\n\t\tReseller,\n\t\tSalesTerritory_SalesTerritoryKey_Generated,\n\t\tChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForChannelTypeId\nSelectForChannelTypeId select(mapColumn(\n\t\tChannelId = Reseller_ResellerKey_Generated,\n\t\tChannelKey = ResellerId,\n\t\tChannelName = Reseller,\n\t\tTerritoryId = SalesTerritory_SalesTerritoryKey_Generated,\n\t\tChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Channel\nChannel sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Channel',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ChannelSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Channel_DataFlow11')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ResellerDeltaSource"
						},
						{
							"name": "SalesSource"
						},
						{
							"name": "SalesTerritorySource"
						},
						{
							"name": "TargetChannelType"
						}
					],
					"sinks": [
						{
							"name": "ChannelSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ResellerDeltaSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "Deduplicated1SalesSource"
						},
						{
							"name": "Sales"
						},
						{
							"name": "JoinSales"
						},
						{
							"name": "Deduplicated1SalesTerritorySource"
						},
						{
							"name": "SalesTerritory"
						},
						{
							"name": "JoinSalesTerritory"
						},
						{
							"name": "SelectJoinSalesTerritory"
						},
						{
							"name": "Deduplicated1TargetChannelType"
						},
						{
							"name": "SelectChannelType"
						},
						{
							"name": "JoinForChannelTypeId"
						},
						{
							"name": "SelectForChannelTypeId"
						},
						{
							"name": "Channel"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerDeltaSource\nsource(output(\n\t\tSalesAmount as decimal(18,2),\n\t\tTotalProductCost as decimal(18,2),\n\t\tProductStandardCost as decimal(18,2),\n\t\tUnitPriceDiscountPct as decimal(18,2),\n\t\tExtendedAmount as decimal(18,2),\n\t\tUnitPrice as decimal(18,2),\n\t\tOrderQuantity as integer,\n\t\tSalesTerritoryKey as integer,\n\t\tShipDateKey as integer,\n\t\tDueDateKey as integer,\n\t\tOrderDateKey as integer,\n\t\tProductKey as integer,\n\t\tCustomerKey as integer,\n\t\tResellerKey as integer,\n\t\tSalesOrderLineKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Sales',\n\tmanifestType: 'manifest') ~> SalesSource\nsource(output(\n\t\tSalesTerritoryKey as integer,\n\t\tRegion as string,\n\t\tCountry as string,\n\t\tGroup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'SalesTerritory',\n\tmanifestType: 'manifest') ~> SalesTerritorySource\nsource(output(\n\t\tChannelTypeId as integer,\n\t\tChannelTypeName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'ChannelType',\n\tmanifestType: 'manifest') ~> TargetChannelType\nResellerDeltaSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerDeltaSource\nDeduplicated1ResellerDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nSalesSource aggregate(groupBy(ProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey),\n\tSalesAmount = last(SalesAmount),\n\t\tTotalProductCost = last(TotalProductCost),\n\t\tProductStandardCost = last(ProductStandardCost),\n\t\tUnitPriceDiscountPct = last(UnitPriceDiscountPct),\n\t\tExtendedAmount = last(ExtendedAmount),\n\t\tUnitPrice = last(UnitPrice),\n\t\tOrderQuantity = last(OrderQuantity),\n\t\tSalesTerritoryKey = last(SalesTerritoryKey),\n\t\tShipDateKey = last(ShipDateKey),\n\t\tDueDateKey = last(DueDateKey),\n\t\tOrderDateKey = last(OrderDateKey)) ~> Deduplicated1SalesSource\nDeduplicated1SalesSource select(mapColumn(\n\t\tSalesAmount,\n\t\tTotalProductCost,\n\t\tProductStandardCost,\n\t\tUnitPriceDiscountPct,\n\t\tExtendedAmount,\n\t\tUnitPrice,\n\t\tOrderQuantity,\n\t\tSalesTerritoryKey,\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Sales\nReseller, Sales join(Reseller@ResellerKey === Sales@ResellerKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSales\nSalesTerritorySource aggregate(groupBy(SalesTerritoryKey),\n\tGroup = last(Group),\n\t\tCountry = last(Country),\n\t\tRegion = last(Region)) ~> Deduplicated1SalesTerritorySource\nDeduplicated1SalesTerritorySource select(mapColumn(\n\t\tGroup,\n\t\tCountry,\n\t\tRegion,\n\t\tSalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SalesTerritory\nJoinSales, SalesTerritory join(Sales@SalesTerritoryKey === SalesTerritory@SalesTerritoryKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSalesTerritory\nJoinSalesTerritory select(mapColumn(\n\t\tBusinessTypeAlias = BusinessType,\n\t\tReseller_ResellerKey_Generated = Reseller@ResellerKey,\n\t\tResellerId,\n\t\tReseller,\n\t\tSalesTerritory_SalesTerritoryKey_Generated = SalesTerritory@SalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectJoinSalesTerritory\nTargetChannelType aggregate(groupBy(ChannelTypeId),\n\tChannelTypeName = last(ChannelTypeName)) ~> Deduplicated1TargetChannelType\nDeduplicated1TargetChannelType select(mapColumn(\n\t\tChannelTypeId,\n\t\tChannelTypeNameAlias = ChannelTypeName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectChannelType\nSelectJoinSalesTerritory, SelectChannelType join(BusinessTypeAlias === ChannelTypeNameAlias,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinForChannelTypeId\nJoinForChannelTypeId select(mapColumn(\n\t\tBusinessTypeAlias,\n\t\tReseller_ResellerKey_Generated,\n\t\tResellerId,\n\t\tReseller,\n\t\tSalesTerritory_SalesTerritoryKey_Generated,\n\t\tChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForChannelTypeId\nSelectForChannelTypeId select(mapColumn(\n\t\tChannelId = Reseller_ResellerKey_Generated,\n\t\tChannelKey = ResellerId,\n\t\tChannelName = Reseller,\n\t\tTerritoryId = SalesTerritory_SalesTerritoryKey_Generated,\n\t\tChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Channel\nChannel sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Channel',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ChannelSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Country2_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ResellerDeltaSource"
						},
						{
							"name": "TargetCountry"
						}
					],
					"sinks": [
						{
							"name": "CountrySink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ResellerDeltaSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "SelectReseller"
						},
						{
							"name": "PreSKSelectCountry"
						},
						{
							"name": "Deduplicated1PreSKSelectCountry"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectDeduplicated1TargetCountry"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "FilterInsertCountry"
						},
						{
							"name": "InsertCountry"
						},
						{
							"name": "SkCountry"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "DerivedCountry"
						},
						{
							"name": "PostSkCountry"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "FinalCountry"
						},
						{
							"name": "Country"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nResellerDeltaSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerDeltaSource\nDeduplicated1ResellerDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nReseller select(mapColumn(\n\t\tCountryRegion\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectReseller\nSelectReseller select(mapColumn(\n\t\tIsoCountryName = CountryRegion\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectCountry\nPreSKSelectCountry aggregate(groupBy(IsoCountryName),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectCountry\nDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectCountry\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetCountry\nSelectDeduplicated1TargetCountry select(mapColumn(\n\t\tTarIsoCountryName = IsoCountryName,\n\t\tTarCountryId = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetCountry\nSelectDeduplicated1PreSKSelectCountry, SelectTarSelectDeduplicated1TargetCountry join(IsoCountryName === TarIsoCountryName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetCountry\nJoinSelectTarSelectDeduplicated1TargetCountry filter(isNull(TarCountryId)) ~> FilterInsertCountry\nFilterInsertCountry select(mapColumn(\n\t\tIsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertCountry\nInsertCountry keyGenerate(output(Sk_CountryId as long),\n\tstartAt: 1L) ~> SkCountry\nSelectTarSelectDeduplicated1TargetCountry aggregate(Max_TarCountryId = max(toInteger(TarCountryId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetCountry\nAggregatedSelectTarSelectDeduplicated1TargetCountry derive(Max_TarCountryId = iif(isNull(Max_TarCountryId),0,Max_TarCountryId)) ~> MaxSelectTarSelectDeduplicated1TargetCountry\nSkCountry, MaxSelectTarSelectDeduplicated1TargetCountry join(true() === true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetCountry\nJoinMaxSelectTarSelectDeduplicated1TargetCountry derive(CountryId = Sk_CountryId + Max_TarCountryId) ~> DerivedCountry\nDerivedCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkCountry\nJoinSelectTarSelectDeduplicated1TargetCountry filter(!isNull(TarCountryId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectCountry\nFilterUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId = TarCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectCountry\nPostSkCountry, UpdateSelectDeduplicated1PreSKSelectCountry union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectCountry\nUnionUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tTarIsoCountryName = IsoCountryName,\n\t\tTarCountryId = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry\nPreSKSelectCountry, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry join(IsoCountryName === TarIsoCountryName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId = TarCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalCountry\nFinalCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Country\nCountry sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> CountrySink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Country2_DataFlow11')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ResellerDeltaSource"
						},
						{
							"name": "TargetCountry"
						}
					],
					"sinks": [
						{
							"name": "CountrySink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ResellerDeltaSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "SelectReseller"
						},
						{
							"name": "PreSKSelectCountry"
						},
						{
							"name": "Deduplicated1PreSKSelectCountry"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectDeduplicated1TargetCountry"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "FilterInsertCountry"
						},
						{
							"name": "InsertCountry"
						},
						{
							"name": "SkCountry"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "DerivedCountry"
						},
						{
							"name": "PostSkCountry"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "FinalCountry"
						},
						{
							"name": "Country"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nResellerDeltaSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerDeltaSource\nDeduplicated1ResellerDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nReseller select(mapColumn(\n\t\tCountryRegion\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectReseller\nSelectReseller select(mapColumn(\n\t\tIsoCountryName = CountryRegion\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectCountry\nPreSKSelectCountry aggregate(groupBy(IsoCountryName),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectCountry\nDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectCountry\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetCountry\nSelectDeduplicated1TargetCountry select(mapColumn(\n\t\tTarIsoCountryName = IsoCountryName,\n\t\tTarCountryId = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetCountry\nSelectDeduplicated1PreSKSelectCountry, SelectTarSelectDeduplicated1TargetCountry join(IsoCountryName === TarIsoCountryName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetCountry\nJoinSelectTarSelectDeduplicated1TargetCountry filter(isNull(TarCountryId)) ~> FilterInsertCountry\nFilterInsertCountry select(mapColumn(\n\t\tIsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertCountry\nInsertCountry keyGenerate(output(Sk_CountryId as long),\n\tstartAt: 1L) ~> SkCountry\nSelectTarSelectDeduplicated1TargetCountry aggregate(Max_TarCountryId = max(toInteger(TarCountryId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetCountry\nAggregatedSelectTarSelectDeduplicated1TargetCountry derive(Max_TarCountryId = iif(isNull(Max_TarCountryId),0,Max_TarCountryId)) ~> MaxSelectTarSelectDeduplicated1TargetCountry\nSkCountry, MaxSelectTarSelectDeduplicated1TargetCountry join(true() === true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetCountry\nJoinMaxSelectTarSelectDeduplicated1TargetCountry derive(CountryId = Sk_CountryId + Max_TarCountryId) ~> DerivedCountry\nDerivedCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkCountry\nJoinSelectTarSelectDeduplicated1TargetCountry filter(!isNull(TarCountryId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectCountry\nFilterUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId = TarCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectCountry\nPostSkCountry, UpdateSelectDeduplicated1PreSKSelectCountry union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectCountry\nUnionUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tTarIsoCountryName = IsoCountryName,\n\t\tTarCountryId = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry\nPreSKSelectCountry, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry join(IsoCountryName === TarIsoCountryName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId = TarCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalCountry\nFinalCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Country\nCountry sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> CountrySink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Country_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "CustomerDataDeltaSource"
						},
						{
							"name": "TargetCountry"
						}
					],
					"sinks": [
						{
							"name": "CountrySink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1CustomerDataDeltaSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "SelectCustomerData"
						},
						{
							"name": "PreSKSelectCountry"
						},
						{
							"name": "Deduplicated1PreSKSelectCountry"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectDeduplicated1TargetCountry"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "FilterInsertCountry"
						},
						{
							"name": "InsertCountry"
						},
						{
							"name": "SkCountry"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "DerivedCountry"
						},
						{
							"name": "PostSkCountry"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "FinalCountry"
						},
						{
							"name": "Country"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nCustomerDataDeltaSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataDeltaSource\nDeduplicated1CustomerDataDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nCustomerData select(mapColumn(\n\t\tCountryRegion\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCustomerData\nSelectCustomerData select(mapColumn(\n\t\tIsoCountryName = CountryRegion\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectCountry\nPreSKSelectCountry aggregate(groupBy(IsoCountryName),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectCountry\nDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectCountry\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetCountry\nSelectDeduplicated1TargetCountry select(mapColumn(\n\t\tTarIsoCountryName = IsoCountryName,\n\t\tTarCountryId = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetCountry\nSelectDeduplicated1PreSKSelectCountry, SelectTarSelectDeduplicated1TargetCountry join(IsoCountryName === TarIsoCountryName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetCountry\nJoinSelectTarSelectDeduplicated1TargetCountry filter(isNull(TarCountryId)) ~> FilterInsertCountry\nFilterInsertCountry select(mapColumn(\n\t\tIsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertCountry\nInsertCountry keyGenerate(output(Sk_CountryId as long),\n\tstartAt: 1L) ~> SkCountry\nSelectTarSelectDeduplicated1TargetCountry aggregate(Max_TarCountryId = max(toInteger(TarCountryId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetCountry\nAggregatedSelectTarSelectDeduplicated1TargetCountry derive(Max_TarCountryId = iif(isNull(Max_TarCountryId),0,Max_TarCountryId)) ~> MaxSelectTarSelectDeduplicated1TargetCountry\nSkCountry, MaxSelectTarSelectDeduplicated1TargetCountry join(true() === true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetCountry\nJoinMaxSelectTarSelectDeduplicated1TargetCountry derive(CountryId = Sk_CountryId + Max_TarCountryId) ~> DerivedCountry\nDerivedCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkCountry\nJoinSelectTarSelectDeduplicated1TargetCountry filter(!isNull(TarCountryId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectCountry\nFilterUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId = TarCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectCountry\nPostSkCountry, UpdateSelectDeduplicated1PreSKSelectCountry union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectCountry\nUnionUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tTarIsoCountryName = IsoCountryName,\n\t\tTarCountryId = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry\nPreSKSelectCountry, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry join(IsoCountryName === TarIsoCountryName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId = TarCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalCountry\nFinalCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Country\nCountry sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> CountrySink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Country_DataFlow11')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "CustomerDataDeltaSource"
						},
						{
							"name": "TargetCountry"
						}
					],
					"sinks": [
						{
							"name": "CountrySink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1CustomerDataDeltaSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "SelectCustomerData"
						},
						{
							"name": "PreSKSelectCountry"
						},
						{
							"name": "Deduplicated1PreSKSelectCountry"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectDeduplicated1TargetCountry"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "FilterInsertCountry"
						},
						{
							"name": "InsertCountry"
						},
						{
							"name": "SkCountry"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "DerivedCountry"
						},
						{
							"name": "PostSkCountry"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "FinalCountry"
						},
						{
							"name": "Country"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nCustomerDataDeltaSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataDeltaSource\nDeduplicated1CustomerDataDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nCustomerData select(mapColumn(\n\t\tCountryRegion\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCustomerData\nSelectCustomerData select(mapColumn(\n\t\tIsoCountryName = CountryRegion\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectCountry\nPreSKSelectCountry aggregate(groupBy(IsoCountryName),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectCountry\nDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectCountry\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetCountry\nSelectDeduplicated1TargetCountry select(mapColumn(\n\t\tTarIsoCountryName = IsoCountryName,\n\t\tTarCountryId = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetCountry\nSelectDeduplicated1PreSKSelectCountry, SelectTarSelectDeduplicated1TargetCountry join(IsoCountryName === TarIsoCountryName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetCountry\nJoinSelectTarSelectDeduplicated1TargetCountry filter(isNull(TarCountryId)) ~> FilterInsertCountry\nFilterInsertCountry select(mapColumn(\n\t\tIsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertCountry\nInsertCountry keyGenerate(output(Sk_CountryId as long),\n\tstartAt: 1L) ~> SkCountry\nSelectTarSelectDeduplicated1TargetCountry aggregate(Max_TarCountryId = max(toInteger(TarCountryId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetCountry\nAggregatedSelectTarSelectDeduplicated1TargetCountry derive(Max_TarCountryId = iif(isNull(Max_TarCountryId),0,Max_TarCountryId)) ~> MaxSelectTarSelectDeduplicated1TargetCountry\nSkCountry, MaxSelectTarSelectDeduplicated1TargetCountry join(true() === true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetCountry\nJoinMaxSelectTarSelectDeduplicated1TargetCountry derive(CountryId = Sk_CountryId + Max_TarCountryId) ~> DerivedCountry\nDerivedCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkCountry\nJoinSelectTarSelectDeduplicated1TargetCountry filter(!isNull(TarCountryId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectCountry\nFilterUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId = TarCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectCountry\nPostSkCountry, UpdateSelectDeduplicated1PreSKSelectCountry union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectCountry\nUnionUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tTarIsoCountryName = IsoCountryName,\n\t\tTarCountryId = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry\nPreSKSelectCountry, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry join(IsoCountryName === TarIsoCountryName,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId = TarCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalCountry\nFinalCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Country\nCountry sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> CountrySink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Customer_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "CustomerDataDeltaSource"
						},
						{
							"name": "TargetCountry"
						},
						{
							"name": "TargetLocation"
						}
					],
					"sinks": [
						{
							"name": "CustomerSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1CustomerDataDeltaSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "SelectCustomerData"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectCountry"
						},
						{
							"name": "JoinForCountryIdLookupFunction"
						},
						{
							"name": "SelectForCountryIdLookupFunction"
						},
						{
							"name": "Deduplicated1TargetLocation"
						},
						{
							"name": "SelectLocation"
						},
						{
							"name": "JoinForLocationId"
						},
						{
							"name": "SelectForLocationId"
						},
						{
							"name": "Customer"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nsource(output(\n\t\tLocationId as integer,\n\t\tLocationCity as string,\n\t\tLocationState as string,\n\t\tCountryId as integer,\n\t\tLocationZip as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tmanifestType: 'manifest') ~> TargetLocation\nCustomerDataDeltaSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataDeltaSource\nDeduplicated1CustomerDataDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nCustomerData select(mapColumn(\n\t\tPostalCodeAlias = PostalCode,\n\t\tStateProvinceAlias = StateProvince,\n\t\tCityAlias = City,\n\t\tCountryRegionAlias = CountryRegion,\n\t\tCustomerId,\n\t\tCustomerData_CustomerKey_Generated = CustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCustomerData\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tCountryIdLookupFunction = CountryId,\n\t\tIsoCountryNameAlias = IsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCountry\nSelectCustomerData, SelectCountry join(CountryRegionAlias === IsoCountryNameAlias,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinForCountryIdLookupFunction\nJoinForCountryIdLookupFunction select(mapColumn(\n\t\tPostalCodeAlias,\n\t\tStateProvinceAlias,\n\t\tCityAlias,\n\t\tCountryRegionAlias,\n\t\tCustomerId,\n\t\tCustomerData_CustomerKey_Generated,\n\t\tCountryIdLookupFunction\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForCountryIdLookupFunction\nTargetLocation aggregate(groupBy(LocationId),\n\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId),\n\t\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState)) ~> Deduplicated1TargetLocation\nDeduplicated1TargetLocation select(mapColumn(\n\t\tLocationId,\n\t\tLocationZipAlias = LocationZip,\n\t\tLocationStateAlias = LocationState,\n\t\tLocationCityAlias = LocationCity,\n\t\tCountryIdAlias = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectLocation\nSelectForCountryIdLookupFunction, SelectLocation join(PostalCodeAlias === LocationZipAlias\n\t&& StateProvinceAlias === LocationStateAlias\n\t&& CityAlias === LocationCityAlias\n\t&& CountryIdLookupFunction === CountryIdAlias,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinForLocationId\nJoinForLocationId select(mapColumn(\n\t\tPostalCodeAlias,\n\t\tStateProvinceAlias,\n\t\tCityAlias,\n\t\tCountryRegionAlias,\n\t\tCustomerId,\n\t\tCustomerData_CustomerKey_Generated,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForLocationId\nSelectForLocationId select(mapColumn(\n\t\tLocationId,\n\t\tCustomerKey = CustomerId,\n\t\tCustomerId = CustomerData_CustomerKey_Generated\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Customer\nCustomer sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Customer',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> CustomerSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Customer_DataFlow11')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "CustomerDataDeltaSource"
						},
						{
							"name": "TargetCountry"
						},
						{
							"name": "TargetLocation"
						}
					],
					"sinks": [
						{
							"name": "CustomerSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1CustomerDataDeltaSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "SelectCustomerData"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectCountry"
						},
						{
							"name": "JoinForCountryIdLookupFunction"
						},
						{
							"name": "SelectForCountryIdLookupFunction"
						},
						{
							"name": "Deduplicated1TargetLocation"
						},
						{
							"name": "SelectLocation"
						},
						{
							"name": "JoinForLocationId"
						},
						{
							"name": "SelectForLocationId"
						},
						{
							"name": "Customer"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nsource(output(\n\t\tLocationId as integer,\n\t\tLocationCity as string,\n\t\tLocationState as string,\n\t\tCountryId as integer,\n\t\tLocationZip as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tmanifestType: 'manifest') ~> TargetLocation\nCustomerDataDeltaSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataDeltaSource\nDeduplicated1CustomerDataDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nCustomerData select(mapColumn(\n\t\tPostalCodeAlias = PostalCode,\n\t\tStateProvinceAlias = StateProvince,\n\t\tCityAlias = City,\n\t\tCountryRegionAlias = CountryRegion,\n\t\tCustomerId,\n\t\tCustomerData_CustomerKey_Generated = CustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCustomerData\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tCountryIdLookupFunction = CountryId,\n\t\tIsoCountryNameAlias = IsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCountry\nSelectCustomerData, SelectCountry join(CountryRegionAlias === IsoCountryNameAlias,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinForCountryIdLookupFunction\nJoinForCountryIdLookupFunction select(mapColumn(\n\t\tPostalCodeAlias,\n\t\tStateProvinceAlias,\n\t\tCityAlias,\n\t\tCountryRegionAlias,\n\t\tCustomerId,\n\t\tCustomerData_CustomerKey_Generated,\n\t\tCountryIdLookupFunction\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForCountryIdLookupFunction\nTargetLocation aggregate(groupBy(LocationId),\n\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId),\n\t\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState)) ~> Deduplicated1TargetLocation\nDeduplicated1TargetLocation select(mapColumn(\n\t\tLocationId,\n\t\tLocationZipAlias = LocationZip,\n\t\tLocationStateAlias = LocationState,\n\t\tLocationCityAlias = LocationCity,\n\t\tCountryIdAlias = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectLocation\nSelectForCountryIdLookupFunction, SelectLocation join(PostalCodeAlias === LocationZipAlias\n\t&& StateProvinceAlias === LocationStateAlias\n\t&& CityAlias === LocationCityAlias\n\t&& CountryIdLookupFunction === CountryIdAlias,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinForLocationId\nJoinForLocationId select(mapColumn(\n\t\tPostalCodeAlias,\n\t\tStateProvinceAlias,\n\t\tCityAlias,\n\t\tCountryRegionAlias,\n\t\tCustomerId,\n\t\tCustomerData_CustomerKey_Generated,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForLocationId\nSelectForLocationId select(mapColumn(\n\t\tLocationId,\n\t\tCustomerKey = CustomerId,\n\t\tCustomerId = CustomerData_CustomerKey_Generated\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Customer\nCustomer sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Customer',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> CustomerSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "donordata",
								"type": "DatasetReference"
							},
							"name": "adlsdonordata"
						},
						{
							"dataset": {
								"referenceName": "volunteerdata",
								"type": "DatasetReference"
							},
							"name": "adlsvolunteerdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> adlsdonordata\nsource(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string,\n\t\tColumn_7 as string,\n\t\tColumn_8 as string,\n\t\tColumn_9 as string,\n\t\tColumn_10 as string,\n\t\tColumn_11 as string,\n\t\tColumn_12 as string,\n\t\tColumn_13 as string,\n\t\tColumn_14 as string,\n\t\tColumn_15 as string,\n\t\tColumn_16 as string,\n\t\tColumn_17 as string,\n\t\tColumn_18 as string,\n\t\tColumn_19 as string,\n\t\tColumn_20 as string,\n\t\tColumn_21 as string,\n\t\tColumn_22 as string,\n\t\tColumn_23 as string,\n\t\tColumn_24 as string,\n\t\tColumn_25 as string,\n\t\tColumn_26 as string,\n\t\tColumn_27 as string,\n\t\tColumn_28 as string,\n\t\tColumn_29 as string,\n\t\tColumn_30 as string,\n\t\tColumn_31 as string,\n\t\tColumn_32 as string,\n\t\tColumn_33 as string,\n\t\tColumn_34 as string,\n\t\tColumn_35 as string,\n\t\tColumn_36 as string,\n\t\tColumn_37 as string,\n\t\tColumn_38 as string,\n\t\tColumn_39 as string,\n\t\tColumn_40 as string,\n\t\tColumn_41 as string,\n\t\tColumn_42 as string,\n\t\tColumn_43 as string,\n\t\tColumn_44 as string,\n\t\tColumn_45 as string,\n\t\tColumn_46 as string,\n\t\tColumn_47 as string,\n\t\tColumn_48 as string,\n\t\tColumn_49 as string,\n\t\tColumn_50 as string,\n\t\tColumn_51 as string,\n\t\tColumn_52 as string,\n\t\tColumn_53 as string,\n\t\tColumn_54 as string,\n\t\tColumn_55 as string,\n\t\tColumn_56 as string,\n\t\tColumn_57 as string,\n\t\tColumn_58 as string,\n\t\tColumn_59 as string,\n\t\tColumn_60 as string,\n\t\tColumn_61 as string,\n\t\tColumn_62 as string,\n\t\tColumn_63 as string,\n\t\tColumn_64 as string,\n\t\tColumn_65 as string,\n\t\tColumn_66 as string,\n\t\tColumn_67 as string,\n\t\tColumn_68 as string,\n\t\tColumn_69 as string,\n\t\tColumn_70 as string,\n\t\tColumn_71 as string,\n\t\tColumn_72 as string,\n\t\tColumn_73 as string,\n\t\tColumn_74 as string,\n\t\tColumn_75 as string,\n\t\tColumn_76 as string,\n\t\tColumn_77 as string,\n\t\tColumn_78 as string,\n\t\tColumn_79 as string,\n\t\tColumn_80 as string,\n\t\tColumn_81 as string,\n\t\tColumn_82 as string,\n\t\tColumn_83 as string,\n\t\tColumn_84 as string,\n\t\tColumn_85 as string,\n\t\tColumn_86 as string,\n\t\tColumn_87 as string,\n\t\tColumn_88 as string,\n\t\tColumn_89 as string,\n\t\tColumn_90 as string,\n\t\tColumn_91 as string,\n\t\tColumn_92 as string,\n\t\tColumn_93 as string,\n\t\tColumn_94 as string,\n\t\tColumn_95 as string,\n\t\tColumn_96 as string,\n\t\tColumn_97 as string,\n\t\tColumn_98 as string,\n\t\tColumn_99 as string,\n\t\tColumn_100 as string,\n\t\tColumn_101 as string,\n\t\tColumn_102 as string,\n\t\tColumn_103 as string,\n\t\tColumn_104 as string,\n\t\tColumn_105 as string,\n\t\tColumn_106 as string,\n\t\tColumn_107 as string,\n\t\tColumn_108 as string,\n\t\tColumn_109 as string,\n\t\tColumn_110 as string,\n\t\tColumn_111 as string,\n\t\tColumn_112 as string,\n\t\tColumn_113 as string,\n\t\tColumn_114 as string,\n\t\tColumn_115 as string,\n\t\tColumn_116 as string,\n\t\tColumn_117 as string,\n\t\tColumn_118 as string,\n\t\tColumn_119 as string,\n\t\tColumn_120 as string,\n\t\tColumn_121 as string,\n\t\tColumn_122 as string,\n\t\tColumn_123 as string,\n\t\tColumn_124 as string,\n\t\tColumn_125 as string,\n\t\tColumn_126 as string,\n\t\tColumn_127 as string,\n\t\tColumn_128 as string,\n\t\tColumn_129 as string,\n\t\tColumn_130 as string,\n\t\tColumn_131 as string,\n\t\tColumn_132 as string,\n\t\tColumn_133 as string,\n\t\tColumn_134 as string,\n\t\tColumn_135 as string,\n\t\tColumn_136 as string,\n\t\tColumn_137 as string,\n\t\tColumn_138 as string,\n\t\tColumn_139 as string,\n\t\tColumn_140 as string,\n\t\tColumn_141 as string,\n\t\tColumn_142 as string,\n\t\tColumn_143 as string,\n\t\tColumn_144 as string,\n\t\tColumn_145 as string,\n\t\tColumn_146 as string,\n\t\tColumn_147 as string,\n\t\tColumn_148 as string,\n\t\tColumn_149 as string,\n\t\tColumn_150 as string,\n\t\tColumn_151 as string,\n\t\tColumn_152 as string,\n\t\tColumn_153 as string,\n\t\tColumn_154 as string,\n\t\tColumn_155 as string,\n\t\tColumn_156 as string,\n\t\tColumn_157 as string,\n\t\tColumn_158 as string,\n\t\tColumn_159 as string,\n\t\tColumn_160 as string,\n\t\tColumn_161 as string,\n\t\tColumn_162 as string,\n\t\tColumn_163 as string,\n\t\tColumn_164 as string,\n\t\tColumn_165 as string,\n\t\tColumn_166 as string,\n\t\tColumn_167 as string,\n\t\tColumn_168 as string,\n\t\tColumn_169 as string,\n\t\tColumn_170 as string,\n\t\tColumn_171 as string,\n\t\tColumn_172 as string,\n\t\tColumn_173 as string,\n\t\tColumn_174 as string,\n\t\tColumn_175 as string,\n\t\tColumn_176 as string,\n\t\tColumn_177 as string,\n\t\tColumn_178 as string,\n\t\tColumn_179 as string,\n\t\tColumn_180 as string,\n\t\tColumn_181 as string,\n\t\tColumn_182 as string,\n\t\tColumn_183 as string,\n\t\tColumn_184 as string,\n\t\tColumn_185 as string,\n\t\tColumn_186 as string,\n\t\tColumn_187 as string,\n\t\tColumn_188 as string,\n\t\tColumn_189 as string,\n\t\tColumn_190 as string,\n\t\tColumn_191 as string,\n\t\tColumn_192 as string,\n\t\tColumn_193 as string,\n\t\tColumn_194 as string,\n\t\tColumn_195 as string,\n\t\tColumn_196 as string,\n\t\tColumn_197 as string,\n\t\tColumn_198 as string,\n\t\tColumn_199 as string,\n\t\tColumn_200 as string,\n\t\tColumn_201 as string,\n\t\tColumn_202 as string,\n\t\tColumn_203 as string,\n\t\tColumn_204 as string,\n\t\tColumn_205 as string,\n\t\tColumn_206 as string,\n\t\tColumn_207 as string,\n\t\tColumn_208 as string,\n\t\tColumn_209 as string,\n\t\tColumn_210 as string,\n\t\tColumn_211 as string,\n\t\tColumn_212 as string,\n\t\tColumn_213 as string,\n\t\tColumn_214 as string,\n\t\tColumn_215 as string,\n\t\tColumn_216 as string,\n\t\tColumn_217 as string,\n\t\tColumn_218 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> adlsvolunteerdata\nadlsdonordata sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/donordata')]",
				"[concat(variables('workspaceId'), '/datasets/volunteerdata')]",
				"[concat(variables('workspaceId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "donordata",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/donordata')]",
				"[concat(variables('workspaceId'), '/datasets/DelimitedText2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IndividualCustomer_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "CustomerDataDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "IndividualCustomerSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1CustomerDataDeltaSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "SelectCustomerData"
						},
						{
							"name": "IndividualCustomer"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataDeltaSource\nCustomerDataDeltaSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataDeltaSource\nDeduplicated1CustomerDataDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nCustomerData select(mapColumn(\n\t\tCustomerKey,\n\t\tCustomer\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCustomerData\nSelectCustomerData select(mapColumn(\n\t\tCustomerId = CustomerKey,\n\t\tIndividualCustomerName = Customer\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> IndividualCustomer\nIndividualCustomer sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'IndividualCustomer',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> IndividualCustomerSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IndividualCustomer_DataFlow11')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "CustomerDataDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "IndividualCustomerSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1CustomerDataDeltaSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "SelectCustomerData"
						},
						{
							"name": "IndividualCustomer"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataDeltaSource\nCustomerDataDeltaSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataDeltaSource\nDeduplicated1CustomerDataDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nCustomerData select(mapColumn(\n\t\tCustomerKey,\n\t\tCustomer\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCustomerData\nSelectCustomerData select(mapColumn(\n\t\tCustomerId = CustomerKey,\n\t\tIndividualCustomerName = Customer\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> IndividualCustomer\nIndividualCustomer sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'IndividualCustomer',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> IndividualCustomerSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Item_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ProductDataDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "ItemSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ProductDataDeltaSource"
						},
						{
							"name": "ProductData"
						},
						{
							"name": "SelectProductData"
						},
						{
							"name": "Item"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCategory as string,\n\t\tSubcategory as string,\n\t\tModel as string,\n\t\tListPrice as decimal(18,2),\n\t\tColor as string,\n\t\tStandardCost as decimal(18,2),\n\t\tProduct as string,\n\t\tSKU as string,\n\t\tProductKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'ProductData',\n\tmanifestType: 'manifest') ~> ProductDataDeltaSource\nProductDataDeltaSource aggregate(groupBy(ProductKey),\n\tCategory = last(Category),\n\t\tSubcategory = last(Subcategory),\n\t\tModel = last(Model),\n\t\tListPrice = last(ListPrice),\n\t\tColor = last(Color),\n\t\tStandardCost = last(StandardCost),\n\t\tProduct = last(Product),\n\t\tSKU = last(SKU)) ~> Deduplicated1ProductDataDeltaSource\nDeduplicated1ProductDataDeltaSource select(mapColumn(\n\t\tCategory,\n\t\tSubcategory,\n\t\tModel,\n\t\tListPrice,\n\t\tColor,\n\t\tStandardCost,\n\t\tProduct,\n\t\tSKU,\n\t\tProductKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ProductData\nProductData select(mapColumn(\n\t\tSKU,\n\t\tStandardCost,\n\t\tListPrice\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectProductData\nSelectProductData select(mapColumn(\n\t\tItemSku = SKU,\n\t\tStandardCost,\n\t\tListPrice\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Item\nItem sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Item',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ItemSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Item_DataFlow11')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ProductDataDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "ItemSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ProductDataDeltaSource"
						},
						{
							"name": "ProductData"
						},
						{
							"name": "SelectProductData"
						},
						{
							"name": "Item"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCategory as string,\n\t\tSubcategory as string,\n\t\tModel as string,\n\t\tListPrice as decimal(18,2),\n\t\tColor as string,\n\t\tStandardCost as decimal(18,2),\n\t\tProduct as string,\n\t\tSKU as string,\n\t\tProductKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'ProductData',\n\tmanifestType: 'manifest') ~> ProductDataDeltaSource\nProductDataDeltaSource aggregate(groupBy(ProductKey),\n\tCategory = last(Category),\n\t\tSubcategory = last(Subcategory),\n\t\tModel = last(Model),\n\t\tListPrice = last(ListPrice),\n\t\tColor = last(Color),\n\t\tStandardCost = last(StandardCost),\n\t\tProduct = last(Product),\n\t\tSKU = last(SKU)) ~> Deduplicated1ProductDataDeltaSource\nDeduplicated1ProductDataDeltaSource select(mapColumn(\n\t\tCategory,\n\t\tSubcategory,\n\t\tModel,\n\t\tListPrice,\n\t\tColor,\n\t\tStandardCost,\n\t\tProduct,\n\t\tSKU,\n\t\tProductKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ProductData\nProductData select(mapColumn(\n\t\tSKU,\n\t\tStandardCost,\n\t\tListPrice\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectProductData\nSelectProductData select(mapColumn(\n\t\tItemSku = SKU,\n\t\tStandardCost,\n\t\tListPrice\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Item\nItem sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Item',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ItemSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Location2_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ResellerDeltaSource"
						},
						{
							"name": "TargetCountry"
						},
						{
							"name": "TargetLocation"
						}
					],
					"sinks": [
						{
							"name": "LocationSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ResellerDeltaSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "SelectReseller"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectCountry"
						},
						{
							"name": "JoinForCountryId"
						},
						{
							"name": "SelectForCountryId"
						},
						{
							"name": "PreSKSelectLocation"
						},
						{
							"name": "Deduplicated1PreSKSelectLocation"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "Deduplicated1TargetLocation"
						},
						{
							"name": "SelectDeduplicated1TargetLocation"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "FilterInsertLocation"
						},
						{
							"name": "InsertLocation"
						},
						{
							"name": "SkLocation"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "DerivedLocation"
						},
						{
							"name": "PostSkLocation"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "FinalLocation"
						},
						{
							"name": "Location"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nsource(output(\n\t\tLocationId as integer,\n\t\tLocationCity as string,\n\t\tLocationState as string,\n\t\tCountryId as integer,\n\t\tLocationZip as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tmanifestType: 'manifest') ~> TargetLocation\nResellerDeltaSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerDeltaSource\nDeduplicated1ResellerDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nReseller select(mapColumn(\n\t\tCountryRegionAlias = CountryRegion,\n\t\tPostalCode,\n\t\tStateProvince,\n\t\tCity\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectReseller\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tCountryId,\n\t\tIsoCountryNameAlias = IsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCountry\nSelectReseller, SelectCountry join(CountryRegionAlias === IsoCountryNameAlias,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinForCountryId\nJoinForCountryId select(mapColumn(\n\t\tCountryRegionAlias,\n\t\tPostalCode,\n\t\tStateProvince,\n\t\tCity,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForCountryId\nSelectForCountryId select(mapColumn(\n\t\tLocationZip = PostalCode,\n\t\tLocationState = StateProvince,\n\t\tLocationCity = City,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectLocation\nPreSKSelectLocation aggregate(groupBy(LocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectLocation\nDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectLocation\nTargetLocation aggregate(groupBy(LocationId),\n\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState),\n\t\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId)) ~> Deduplicated1TargetLocation\nDeduplicated1TargetLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetLocation\nSelectDeduplicated1TargetLocation select(mapColumn(\n\t\tTarLocationCity = LocationCity,\n\t\tTarLocationState = LocationState,\n\t\tTarCountryId = CountryId,\n\t\tTarLocationZip = LocationZip,\n\t\tTarLocationId = LocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetLocation\nSelectDeduplicated1PreSKSelectLocation, SelectTarSelectDeduplicated1TargetLocation join(LocationCity === TarLocationCity\n\t&& LocationState === TarLocationState\n\t&& CountryId === TarCountryId\n\t&& LocationZip === TarLocationZip,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetLocation\nJoinSelectTarSelectDeduplicated1TargetLocation filter(isNull(TarLocationId)) ~> FilterInsertLocation\nFilterInsertLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertLocation\nInsertLocation keyGenerate(output(Sk_LocationId as long),\n\tstartAt: 1L) ~> SkLocation\nSelectTarSelectDeduplicated1TargetLocation aggregate(Max_TarLocationId = max(toInteger(TarLocationId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetLocation\nAggregatedSelectTarSelectDeduplicated1TargetLocation derive(Max_TarLocationId = iif(isNull(Max_TarLocationId),0,Max_TarLocationId)) ~> MaxSelectTarSelectDeduplicated1TargetLocation\nSkLocation, MaxSelectTarSelectDeduplicated1TargetLocation join(true() === true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetLocation\nJoinMaxSelectTarSelectDeduplicated1TargetLocation derive(LocationId = Sk_LocationId + Max_TarLocationId) ~> DerivedLocation\nDerivedLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkLocation\nJoinSelectTarSelectDeduplicated1TargetLocation filter(!isNull(TarLocationId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectLocation\nFilterUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId = TarLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectLocation\nPostSkLocation, UpdateSelectDeduplicated1PreSKSelectLocation union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectLocation\nUnionUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tTarLocationCity = LocationCity,\n\t\tTarLocationState = LocationState,\n\t\tTarCountryId = CountryId,\n\t\tTarLocationZip = LocationZip,\n\t\tTarLocationId = LocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation\nPreSKSelectLocation, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation join(LocationCity === TarLocationCity\n\t&& LocationState === TarLocationState\n\t&& CountryId === TarCountryId\n\t&& LocationZip === TarLocationZip,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationZip,\n\t\tLocationState,\n\t\tLocationCity,\n\t\tCountryId,\n\t\tLocationId = TarLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalLocation\nFinalLocation aggregate(groupBy(LocationId),\n\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState),\n\t\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId)) ~> Location\nLocation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> LocationSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Location2_DataFlow11')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ResellerDeltaSource"
						},
						{
							"name": "TargetCountry"
						},
						{
							"name": "TargetLocation"
						}
					],
					"sinks": [
						{
							"name": "LocationSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ResellerDeltaSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "SelectReseller"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectCountry"
						},
						{
							"name": "JoinForCountryId"
						},
						{
							"name": "SelectForCountryId"
						},
						{
							"name": "PreSKSelectLocation"
						},
						{
							"name": "Deduplicated1PreSKSelectLocation"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "Deduplicated1TargetLocation"
						},
						{
							"name": "SelectDeduplicated1TargetLocation"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "FilterInsertLocation"
						},
						{
							"name": "InsertLocation"
						},
						{
							"name": "SkLocation"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "DerivedLocation"
						},
						{
							"name": "PostSkLocation"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "FinalLocation"
						},
						{
							"name": "Location"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nsource(output(\n\t\tLocationId as integer,\n\t\tLocationCity as string,\n\t\tLocationState as string,\n\t\tCountryId as integer,\n\t\tLocationZip as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tmanifestType: 'manifest') ~> TargetLocation\nResellerDeltaSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerDeltaSource\nDeduplicated1ResellerDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nReseller select(mapColumn(\n\t\tCountryRegionAlias = CountryRegion,\n\t\tPostalCode,\n\t\tStateProvince,\n\t\tCity\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectReseller\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tCountryId,\n\t\tIsoCountryNameAlias = IsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCountry\nSelectReseller, SelectCountry join(CountryRegionAlias === IsoCountryNameAlias,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinForCountryId\nJoinForCountryId select(mapColumn(\n\t\tCountryRegionAlias,\n\t\tPostalCode,\n\t\tStateProvince,\n\t\tCity,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForCountryId\nSelectForCountryId select(mapColumn(\n\t\tLocationZip = PostalCode,\n\t\tLocationState = StateProvince,\n\t\tLocationCity = City,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectLocation\nPreSKSelectLocation aggregate(groupBy(LocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectLocation\nDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectLocation\nTargetLocation aggregate(groupBy(LocationId),\n\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState),\n\t\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId)) ~> Deduplicated1TargetLocation\nDeduplicated1TargetLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetLocation\nSelectDeduplicated1TargetLocation select(mapColumn(\n\t\tTarLocationCity = LocationCity,\n\t\tTarLocationState = LocationState,\n\t\tTarCountryId = CountryId,\n\t\tTarLocationZip = LocationZip,\n\t\tTarLocationId = LocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetLocation\nSelectDeduplicated1PreSKSelectLocation, SelectTarSelectDeduplicated1TargetLocation join(LocationCity === TarLocationCity\n\t&& LocationState === TarLocationState\n\t&& CountryId === TarCountryId\n\t&& LocationZip === TarLocationZip,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetLocation\nJoinSelectTarSelectDeduplicated1TargetLocation filter(isNull(TarLocationId)) ~> FilterInsertLocation\nFilterInsertLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertLocation\nInsertLocation keyGenerate(output(Sk_LocationId as long),\n\tstartAt: 1L) ~> SkLocation\nSelectTarSelectDeduplicated1TargetLocation aggregate(Max_TarLocationId = max(toInteger(TarLocationId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetLocation\nAggregatedSelectTarSelectDeduplicated1TargetLocation derive(Max_TarLocationId = iif(isNull(Max_TarLocationId),0,Max_TarLocationId)) ~> MaxSelectTarSelectDeduplicated1TargetLocation\nSkLocation, MaxSelectTarSelectDeduplicated1TargetLocation join(true() === true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetLocation\nJoinMaxSelectTarSelectDeduplicated1TargetLocation derive(LocationId = Sk_LocationId + Max_TarLocationId) ~> DerivedLocation\nDerivedLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkLocation\nJoinSelectTarSelectDeduplicated1TargetLocation filter(!isNull(TarLocationId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectLocation\nFilterUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId = TarLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectLocation\nPostSkLocation, UpdateSelectDeduplicated1PreSKSelectLocation union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectLocation\nUnionUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tTarLocationCity = LocationCity,\n\t\tTarLocationState = LocationState,\n\t\tTarCountryId = CountryId,\n\t\tTarLocationZip = LocationZip,\n\t\tTarLocationId = LocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation\nPreSKSelectLocation, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation join(LocationCity === TarLocationCity\n\t&& LocationState === TarLocationState\n\t&& CountryId === TarCountryId\n\t&& LocationZip === TarLocationZip,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationZip,\n\t\tLocationState,\n\t\tLocationCity,\n\t\tCountryId,\n\t\tLocationId = TarLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalLocation\nFinalLocation aggregate(groupBy(LocationId),\n\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState),\n\t\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId)) ~> Location\nLocation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> LocationSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Location_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "CustomerDataDeltaSource"
						},
						{
							"name": "TargetCountry"
						},
						{
							"name": "TargetLocation"
						}
					],
					"sinks": [
						{
							"name": "LocationSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1CustomerDataDeltaSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "SelectCustomerData"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectCountry"
						},
						{
							"name": "JoinForCountryId"
						},
						{
							"name": "SelectForCountryId"
						},
						{
							"name": "PreSKSelectLocation"
						},
						{
							"name": "Deduplicated1PreSKSelectLocation"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "Deduplicated1TargetLocation"
						},
						{
							"name": "SelectDeduplicated1TargetLocation"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "FilterInsertLocation"
						},
						{
							"name": "InsertLocation"
						},
						{
							"name": "SkLocation"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "DerivedLocation"
						},
						{
							"name": "PostSkLocation"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "FinalLocation"
						},
						{
							"name": "Location"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nsource(output(\n\t\tLocationId as integer,\n\t\tLocationCity as string,\n\t\tLocationState as string,\n\t\tCountryId as integer,\n\t\tLocationZip as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tmanifestType: 'manifest') ~> TargetLocation\nCustomerDataDeltaSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataDeltaSource\nDeduplicated1CustomerDataDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nCustomerData select(mapColumn(\n\t\tCountryRegionAlias = CountryRegion,\n\t\tPostalCode,\n\t\tStateProvince,\n\t\tCity\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCustomerData\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tCountryId,\n\t\tIsoCountryNameAlias = IsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCountry\nSelectCustomerData, SelectCountry join(CountryRegionAlias === IsoCountryNameAlias,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinForCountryId\nJoinForCountryId select(mapColumn(\n\t\tCountryRegionAlias,\n\t\tPostalCode,\n\t\tStateProvince,\n\t\tCity,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForCountryId\nSelectForCountryId select(mapColumn(\n\t\tLocationZip = PostalCode,\n\t\tLocationState = StateProvince,\n\t\tLocationCity = City,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectLocation\nPreSKSelectLocation aggregate(groupBy(LocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectLocation\nDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectLocation\nTargetLocation aggregate(groupBy(LocationId),\n\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState),\n\t\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId)) ~> Deduplicated1TargetLocation\nDeduplicated1TargetLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetLocation\nSelectDeduplicated1TargetLocation select(mapColumn(\n\t\tTarLocationCity = LocationCity,\n\t\tTarLocationState = LocationState,\n\t\tTarCountryId = CountryId,\n\t\tTarLocationZip = LocationZip,\n\t\tTarLocationId = LocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetLocation\nSelectDeduplicated1PreSKSelectLocation, SelectTarSelectDeduplicated1TargetLocation join(LocationCity === TarLocationCity\n\t&& LocationState === TarLocationState\n\t&& CountryId === TarCountryId\n\t&& LocationZip === TarLocationZip,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetLocation\nJoinSelectTarSelectDeduplicated1TargetLocation filter(isNull(TarLocationId)) ~> FilterInsertLocation\nFilterInsertLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertLocation\nInsertLocation keyGenerate(output(Sk_LocationId as long),\n\tstartAt: 1L) ~> SkLocation\nSelectTarSelectDeduplicated1TargetLocation aggregate(Max_TarLocationId = max(toInteger(TarLocationId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetLocation\nAggregatedSelectTarSelectDeduplicated1TargetLocation derive(Max_TarLocationId = iif(isNull(Max_TarLocationId),0,Max_TarLocationId)) ~> MaxSelectTarSelectDeduplicated1TargetLocation\nSkLocation, MaxSelectTarSelectDeduplicated1TargetLocation join(true() === true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetLocation\nJoinMaxSelectTarSelectDeduplicated1TargetLocation derive(LocationId = Sk_LocationId + Max_TarLocationId) ~> DerivedLocation\nDerivedLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkLocation\nJoinSelectTarSelectDeduplicated1TargetLocation filter(!isNull(TarLocationId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectLocation\nFilterUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId = TarLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectLocation\nPostSkLocation, UpdateSelectDeduplicated1PreSKSelectLocation union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectLocation\nUnionUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tTarLocationCity = LocationCity,\n\t\tTarLocationState = LocationState,\n\t\tTarCountryId = CountryId,\n\t\tTarLocationZip = LocationZip,\n\t\tTarLocationId = LocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation\nPreSKSelectLocation, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation join(LocationCity === TarLocationCity\n\t&& LocationState === TarLocationState\n\t&& CountryId === TarCountryId\n\t&& LocationZip === TarLocationZip,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationZip,\n\t\tLocationState,\n\t\tLocationCity,\n\t\tCountryId,\n\t\tLocationId = TarLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalLocation\nFinalLocation aggregate(groupBy(LocationId),\n\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState),\n\t\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId)) ~> Location\nLocation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> LocationSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Location_DataFlow11')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "CustomerDataDeltaSource"
						},
						{
							"name": "TargetCountry"
						},
						{
							"name": "TargetLocation"
						}
					],
					"sinks": [
						{
							"name": "LocationSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1CustomerDataDeltaSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "SelectCustomerData"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectCountry"
						},
						{
							"name": "JoinForCountryId"
						},
						{
							"name": "SelectForCountryId"
						},
						{
							"name": "PreSKSelectLocation"
						},
						{
							"name": "Deduplicated1PreSKSelectLocation"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "Deduplicated1TargetLocation"
						},
						{
							"name": "SelectDeduplicated1TargetLocation"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "FilterInsertLocation"
						},
						{
							"name": "InsertLocation"
						},
						{
							"name": "SkLocation"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "DerivedLocation"
						},
						{
							"name": "PostSkLocation"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "FinalLocation"
						},
						{
							"name": "Location"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nsource(output(\n\t\tLocationId as integer,\n\t\tLocationCity as string,\n\t\tLocationState as string,\n\t\tCountryId as integer,\n\t\tLocationZip as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tmanifestType: 'manifest') ~> TargetLocation\nCustomerDataDeltaSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataDeltaSource\nDeduplicated1CustomerDataDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nCustomerData select(mapColumn(\n\t\tCountryRegionAlias = CountryRegion,\n\t\tPostalCode,\n\t\tStateProvince,\n\t\tCity\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCustomerData\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tCountryId,\n\t\tIsoCountryNameAlias = IsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCountry\nSelectCustomerData, SelectCountry join(CountryRegionAlias === IsoCountryNameAlias,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinForCountryId\nJoinForCountryId select(mapColumn(\n\t\tCountryRegionAlias,\n\t\tPostalCode,\n\t\tStateProvince,\n\t\tCity,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForCountryId\nSelectForCountryId select(mapColumn(\n\t\tLocationZip = PostalCode,\n\t\tLocationState = StateProvince,\n\t\tLocationCity = City,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectLocation\nPreSKSelectLocation aggregate(groupBy(LocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectLocation\nDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectLocation\nTargetLocation aggregate(groupBy(LocationId),\n\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState),\n\t\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId)) ~> Deduplicated1TargetLocation\nDeduplicated1TargetLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetLocation\nSelectDeduplicated1TargetLocation select(mapColumn(\n\t\tTarLocationCity = LocationCity,\n\t\tTarLocationState = LocationState,\n\t\tTarCountryId = CountryId,\n\t\tTarLocationZip = LocationZip,\n\t\tTarLocationId = LocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetLocation\nSelectDeduplicated1PreSKSelectLocation, SelectTarSelectDeduplicated1TargetLocation join(LocationCity === TarLocationCity\n\t&& LocationState === TarLocationState\n\t&& CountryId === TarCountryId\n\t&& LocationZip === TarLocationZip,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetLocation\nJoinSelectTarSelectDeduplicated1TargetLocation filter(isNull(TarLocationId)) ~> FilterInsertLocation\nFilterInsertLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertLocation\nInsertLocation keyGenerate(output(Sk_LocationId as long),\n\tstartAt: 1L) ~> SkLocation\nSelectTarSelectDeduplicated1TargetLocation aggregate(Max_TarLocationId = max(toInteger(TarLocationId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetLocation\nAggregatedSelectTarSelectDeduplicated1TargetLocation derive(Max_TarLocationId = iif(isNull(Max_TarLocationId),0,Max_TarLocationId)) ~> MaxSelectTarSelectDeduplicated1TargetLocation\nSkLocation, MaxSelectTarSelectDeduplicated1TargetLocation join(true() === true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetLocation\nJoinMaxSelectTarSelectDeduplicated1TargetLocation derive(LocationId = Sk_LocationId + Max_TarLocationId) ~> DerivedLocation\nDerivedLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkLocation\nJoinSelectTarSelectDeduplicated1TargetLocation filter(!isNull(TarLocationId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectLocation\nFilterUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId = TarLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectLocation\nPostSkLocation, UpdateSelectDeduplicated1PreSKSelectLocation union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectLocation\nUnionUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tTarLocationCity = LocationCity,\n\t\tTarLocationState = LocationState,\n\t\tTarCountryId = CountryId,\n\t\tTarLocationZip = LocationZip,\n\t\tTarLocationId = LocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation\nPreSKSelectLocation, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation join(LocationCity === TarLocationCity\n\t&& LocationState === TarLocationState\n\t&& CountryId === TarCountryId\n\t&& LocationZip === TarLocationZip,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationZip,\n\t\tLocationState,\n\t\tLocationCity,\n\t\tCountryId,\n\t\tLocationId = TarLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalLocation\nFinalLocation aggregate(groupBy(LocationId),\n\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState),\n\t\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId)) ~> Location\nLocation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> LocationSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ProductCategoryDim_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ProductDataDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "ProductCategoryDimSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ProductDataDeltaSource"
						},
						{
							"name": "ProductData"
						},
						{
							"name": "SelectProductData"
						},
						{
							"name": "ProductCategoryDim"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCategory as string,\n\t\tSubcategory as string,\n\t\tModel as string,\n\t\tListPrice as decimal(18,2),\n\t\tColor as string,\n\t\tStandardCost as decimal(18,2),\n\t\tProduct as string,\n\t\tSKU as string,\n\t\tProductKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'ProductData',\n\tmanifestType: 'manifest') ~> ProductDataDeltaSource\nProductDataDeltaSource aggregate(groupBy(ProductKey),\n\tCategory = last(Category),\n\t\tSubcategory = last(Subcategory),\n\t\tModel = last(Model),\n\t\tListPrice = last(ListPrice),\n\t\tColor = last(Color),\n\t\tStandardCost = last(StandardCost),\n\t\tProduct = last(Product),\n\t\tSKU = last(SKU)) ~> Deduplicated1ProductDataDeltaSource\nDeduplicated1ProductDataDeltaSource select(mapColumn(\n\t\tCategory,\n\t\tSubcategory,\n\t\tModel,\n\t\tListPrice,\n\t\tColor,\n\t\tStandardCost,\n\t\tProduct,\n\t\tSKU,\n\t\tProductKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ProductData\nProductData select(mapColumn(\n\t\tProductKey,\n\t\tModel,\n\t\tSubcategory,\n\t\tCategory\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectProductData\nSelectProductData select(mapColumn(\n\t\tProductId = ProductKey,\n\t\tModel,\n\t\tSubCategory = Subcategory,\n\t\tCategory\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ProductCategoryDim\nProductCategoryDim sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'ProductCategoryDim',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ProductCategoryDimSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ProductCategoryDim_DataFlow11')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ProductDataDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "ProductCategoryDimSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ProductDataDeltaSource"
						},
						{
							"name": "ProductData"
						},
						{
							"name": "SelectProductData"
						},
						{
							"name": "ProductCategoryDim"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCategory as string,\n\t\tSubcategory as string,\n\t\tModel as string,\n\t\tListPrice as decimal(18,2),\n\t\tColor as string,\n\t\tStandardCost as decimal(18,2),\n\t\tProduct as string,\n\t\tSKU as string,\n\t\tProductKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'ProductData',\n\tmanifestType: 'manifest') ~> ProductDataDeltaSource\nProductDataDeltaSource aggregate(groupBy(ProductKey),\n\tCategory = last(Category),\n\t\tSubcategory = last(Subcategory),\n\t\tModel = last(Model),\n\t\tListPrice = last(ListPrice),\n\t\tColor = last(Color),\n\t\tStandardCost = last(StandardCost),\n\t\tProduct = last(Product),\n\t\tSKU = last(SKU)) ~> Deduplicated1ProductDataDeltaSource\nDeduplicated1ProductDataDeltaSource select(mapColumn(\n\t\tCategory,\n\t\tSubcategory,\n\t\tModel,\n\t\tListPrice,\n\t\tColor,\n\t\tStandardCost,\n\t\tProduct,\n\t\tSKU,\n\t\tProductKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ProductData\nProductData select(mapColumn(\n\t\tProductKey,\n\t\tModel,\n\t\tSubcategory,\n\t\tCategory\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectProductData\nSelectProductData select(mapColumn(\n\t\tProductId = ProductKey,\n\t\tModel,\n\t\tSubCategory = Subcategory,\n\t\tCategory\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ProductCategoryDim\nProductCategoryDim sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'ProductCategoryDim',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ProductCategoryDimSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Product_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ProductDataDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "ProductSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ProductDataDeltaSource"
						},
						{
							"name": "ProductData"
						},
						{
							"name": "SelectProductData"
						},
						{
							"name": "Product"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCategory as string,\n\t\tSubcategory as string,\n\t\tModel as string,\n\t\tListPrice as decimal(18,2),\n\t\tColor as string,\n\t\tStandardCost as decimal(18,2),\n\t\tProduct as string,\n\t\tSKU as string,\n\t\tProductKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'ProductData',\n\tmanifestType: 'manifest') ~> ProductDataDeltaSource\nProductDataDeltaSource aggregate(groupBy(ProductKey),\n\tCategory = last(Category),\n\t\tSubcategory = last(Subcategory),\n\t\tModel = last(Model),\n\t\tListPrice = last(ListPrice),\n\t\tColor = last(Color),\n\t\tStandardCost = last(StandardCost),\n\t\tProduct = last(Product),\n\t\tSKU = last(SKU)) ~> Deduplicated1ProductDataDeltaSource\nDeduplicated1ProductDataDeltaSource select(mapColumn(\n\t\tCategory,\n\t\tSubcategory,\n\t\tModel,\n\t\tListPrice,\n\t\tColor,\n\t\tStandardCost,\n\t\tProduct,\n\t\tSKU,\n\t\tProductKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ProductData\nProductData select(mapColumn(\n\t\tProductKey,\n\t\tSKU,\n\t\tProduct,\n\t\tColor\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectProductData\nSelectProductData select(mapColumn(\n\t\tProductId = ProductKey,\n\t\tItemSku = SKU,\n\t\tProductName = Product,\n\t\tProductColor = Color\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Product\nProduct sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Product',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ProductSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Product_DataFlow11')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ProductDataDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "ProductSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ProductDataDeltaSource"
						},
						{
							"name": "ProductData"
						},
						{
							"name": "SelectProductData"
						},
						{
							"name": "Product"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCategory as string,\n\t\tSubcategory as string,\n\t\tModel as string,\n\t\tListPrice as decimal(18,2),\n\t\tColor as string,\n\t\tStandardCost as decimal(18,2),\n\t\tProduct as string,\n\t\tSKU as string,\n\t\tProductKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'ProductData',\n\tmanifestType: 'manifest') ~> ProductDataDeltaSource\nProductDataDeltaSource aggregate(groupBy(ProductKey),\n\tCategory = last(Category),\n\t\tSubcategory = last(Subcategory),\n\t\tModel = last(Model),\n\t\tListPrice = last(ListPrice),\n\t\tColor = last(Color),\n\t\tStandardCost = last(StandardCost),\n\t\tProduct = last(Product),\n\t\tSKU = last(SKU)) ~> Deduplicated1ProductDataDeltaSource\nDeduplicated1ProductDataDeltaSource select(mapColumn(\n\t\tCategory,\n\t\tSubcategory,\n\t\tModel,\n\t\tListPrice,\n\t\tColor,\n\t\tStandardCost,\n\t\tProduct,\n\t\tSKU,\n\t\tProductKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ProductData\nProductData select(mapColumn(\n\t\tProductKey,\n\t\tSKU,\n\t\tProduct,\n\t\tColor\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectProductData\nSelectProductData select(mapColumn(\n\t\tProductId = ProductKey,\n\t\tItemSku = SKU,\n\t\tProductName = Product,\n\t\tProductColor = Color\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Product\nProduct sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Product',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ProductSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Territory_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "SalesTerritoryDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "TerritorySink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1SalesTerritoryDeltaSource"
						},
						{
							"name": "SalesTerritory"
						},
						{
							"name": "SelectSalesTerritory"
						},
						{
							"name": "Territory"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tSalesTerritoryKey as integer,\n\t\tRegion as string,\n\t\tCountry as string,\n\t\tGroup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'SalesTerritory',\n\tmanifestType: 'manifest') ~> SalesTerritoryDeltaSource\nSalesTerritoryDeltaSource aggregate(groupBy(SalesTerritoryKey),\n\tGroup = last(Group),\n\t\tCountry = last(Country),\n\t\tRegion = last(Region)) ~> Deduplicated1SalesTerritoryDeltaSource\nDeduplicated1SalesTerritoryDeltaSource select(mapColumn(\n\t\tGroup,\n\t\tCountry,\n\t\tRegion,\n\t\tSalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SalesTerritory\nSalesTerritory select(mapColumn(\n\t\tGroup,\n\t\tCountry,\n\t\tRegion,\n\t\tSalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectSalesTerritory\nSelectSalesTerritory select(mapColumn(\n\t\tGroup,\n\t\tCountry,\n\t\tRegion,\n\t\tTerritoryId = SalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Territory\nTerritory sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Territory',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> TerritorySink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Territory_DataFlow11')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "SalesTerritoryDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "TerritorySink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1SalesTerritoryDeltaSource"
						},
						{
							"name": "SalesTerritory"
						},
						{
							"name": "SelectSalesTerritory"
						},
						{
							"name": "Territory"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tSalesTerritoryKey as integer,\n\t\tRegion as string,\n\t\tCountry as string,\n\t\tGroup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'SalesTerritory',\n\tmanifestType: 'manifest') ~> SalesTerritoryDeltaSource\nSalesTerritoryDeltaSource aggregate(groupBy(SalesTerritoryKey),\n\tGroup = last(Group),\n\t\tCountry = last(Country),\n\t\tRegion = last(Region)) ~> Deduplicated1SalesTerritoryDeltaSource\nDeduplicated1SalesTerritoryDeltaSource select(mapColumn(\n\t\tGroup,\n\t\tCountry,\n\t\tRegion,\n\t\tSalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SalesTerritory\nSalesTerritory select(mapColumn(\n\t\tGroup,\n\t\tCountry,\n\t\tRegion,\n\t\tSalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectSalesTerritory\nSelectSalesTerritory select(mapColumn(\n\t\tGroup,\n\t\tCountry,\n\t\tRegion,\n\t\tTerritoryId = SalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Territory\nTerritory sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Territory',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> TerritorySink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TransactionLineItem_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "SalesDeltaSource"
						},
						{
							"name": "SalesOrderSource"
						}
					],
					"sinks": [
						{
							"name": "TransactionLineItemSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1SalesDeltaSource"
						},
						{
							"name": "Sales"
						},
						{
							"name": "Deduplicated1SalesOrderSource"
						},
						{
							"name": "SalesOrder"
						},
						{
							"name": "JoinSalesOrder"
						},
						{
							"name": "SelectJoinSalesOrder"
						},
						{
							"name": "TransactionLineItem"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tSalesAmount as decimal(18,2),\n\t\tTotalProductCost as decimal(18,2),\n\t\tProductStandardCost as decimal(18,2),\n\t\tUnitPriceDiscountPct as decimal(18,2),\n\t\tExtendedAmount as decimal(18,2),\n\t\tUnitPrice as decimal(18,2),\n\t\tOrderQuantity as integer,\n\t\tSalesTerritoryKey as integer,\n\t\tShipDateKey as integer,\n\t\tDueDateKey as integer,\n\t\tOrderDateKey as integer,\n\t\tProductKey as integer,\n\t\tCustomerKey as integer,\n\t\tResellerKey as integer,\n\t\tSalesOrderLineKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Sales',\n\tmanifestType: 'manifest') ~> SalesDeltaSource\nsource(output(\n\t\tSalesOrderLine as string,\n\t\tSalesOrder as string,\n\t\tSalesOrderLineKey as integer,\n\t\tChannel as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'SalesOrder',\n\tmanifestType: 'manifest') ~> SalesOrderSource\nSalesDeltaSource aggregate(groupBy(ProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey),\n\tSalesAmount = last(SalesAmount),\n\t\tTotalProductCost = last(TotalProductCost),\n\t\tProductStandardCost = last(ProductStandardCost),\n\t\tUnitPriceDiscountPct = last(UnitPriceDiscountPct),\n\t\tExtendedAmount = last(ExtendedAmount),\n\t\tUnitPrice = last(UnitPrice),\n\t\tOrderQuantity = last(OrderQuantity),\n\t\tSalesTerritoryKey = last(SalesTerritoryKey),\n\t\tShipDateKey = last(ShipDateKey),\n\t\tDueDateKey = last(DueDateKey),\n\t\tOrderDateKey = last(OrderDateKey)) ~> Deduplicated1SalesDeltaSource\nDeduplicated1SalesDeltaSource select(mapColumn(\n\t\tSalesAmount,\n\t\tTotalProductCost,\n\t\tProductStandardCost,\n\t\tUnitPriceDiscountPct,\n\t\tExtendedAmount,\n\t\tUnitPrice,\n\t\tOrderQuantity,\n\t\tSalesTerritoryKey,\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Sales\nSalesOrderSource aggregate(groupBy(SalesOrderLineKey),\n\tSalesOrderLine = last(SalesOrderLine),\n\t\tSalesOrder = last(SalesOrder),\n\t\tChannel = last(Channel)) ~> Deduplicated1SalesOrderSource\nDeduplicated1SalesOrderSource select(mapColumn(\n\t\tSalesOrderLine,\n\t\tSalesOrder,\n\t\tSalesOrderLineKey,\n\t\tChannel\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SalesOrder\nSales, SalesOrder join(Sales@SalesOrderLineKey === SalesOrder@SalesOrderLineKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSalesOrder\nJoinSalesOrder select(mapColumn(\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tSalesOrder,\n\t\tSales_SalesOrderLineKey_Generated = Sales@SalesOrderLineKey,\n\t\tProductKey,\n\t\tOrderQuantity,\n\t\tUnitPrice,\n\t\tTotalProductCost,\n\t\tProductStandardCost,\n\t\tSalesAmount,\n\t\tUnitPriceDiscountPct\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectJoinSalesOrder\nSelectJoinSalesOrder select(mapColumn(\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tTransactionId = SalesOrder,\n\t\tTransactionLineItemId = Sales_SalesOrderLineKey_Generated,\n\t\tProductId = ProductKey,\n\t\tQuantity = OrderQuantity,\n\t\tProductListPriceAmount = UnitPrice,\n\t\tTransactionProductPriceAmount = TotalProductCost,\n\t\tTotalTransactionLineItemAmount = ProductStandardCost,\n\t\tTotalTransactionSalesPriceAmount = SalesAmount,\n\t\tProductPriceAdjustmentPercentage = UnitPriceDiscountPct\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> TransactionLineItem\nTransactionLineItem sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'TransactionLineItem',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> TransactionLineItemSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TransactionLineItem_DataFlow11')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "SalesDeltaSource"
						},
						{
							"name": "SalesOrderSource"
						}
					],
					"sinks": [
						{
							"name": "TransactionLineItemSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1SalesDeltaSource"
						},
						{
							"name": "Sales"
						},
						{
							"name": "Deduplicated1SalesOrderSource"
						},
						{
							"name": "SalesOrder"
						},
						{
							"name": "JoinSalesOrder"
						},
						{
							"name": "SelectJoinSalesOrder"
						},
						{
							"name": "TransactionLineItem"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tSalesAmount as decimal(18,2),\n\t\tTotalProductCost as decimal(18,2),\n\t\tProductStandardCost as decimal(18,2),\n\t\tUnitPriceDiscountPct as decimal(18,2),\n\t\tExtendedAmount as decimal(18,2),\n\t\tUnitPrice as decimal(18,2),\n\t\tOrderQuantity as integer,\n\t\tSalesTerritoryKey as integer,\n\t\tShipDateKey as integer,\n\t\tDueDateKey as integer,\n\t\tOrderDateKey as integer,\n\t\tProductKey as integer,\n\t\tCustomerKey as integer,\n\t\tResellerKey as integer,\n\t\tSalesOrderLineKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Sales',\n\tmanifestType: 'manifest') ~> SalesDeltaSource\nsource(output(\n\t\tSalesOrderLine as string,\n\t\tSalesOrder as string,\n\t\tSalesOrderLineKey as integer,\n\t\tChannel as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'SalesOrder',\n\tmanifestType: 'manifest') ~> SalesOrderSource\nSalesDeltaSource aggregate(groupBy(ProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey),\n\tSalesAmount = last(SalesAmount),\n\t\tTotalProductCost = last(TotalProductCost),\n\t\tProductStandardCost = last(ProductStandardCost),\n\t\tUnitPriceDiscountPct = last(UnitPriceDiscountPct),\n\t\tExtendedAmount = last(ExtendedAmount),\n\t\tUnitPrice = last(UnitPrice),\n\t\tOrderQuantity = last(OrderQuantity),\n\t\tSalesTerritoryKey = last(SalesTerritoryKey),\n\t\tShipDateKey = last(ShipDateKey),\n\t\tDueDateKey = last(DueDateKey),\n\t\tOrderDateKey = last(OrderDateKey)) ~> Deduplicated1SalesDeltaSource\nDeduplicated1SalesDeltaSource select(mapColumn(\n\t\tSalesAmount,\n\t\tTotalProductCost,\n\t\tProductStandardCost,\n\t\tUnitPriceDiscountPct,\n\t\tExtendedAmount,\n\t\tUnitPrice,\n\t\tOrderQuantity,\n\t\tSalesTerritoryKey,\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Sales\nSalesOrderSource aggregate(groupBy(SalesOrderLineKey),\n\tSalesOrderLine = last(SalesOrderLine),\n\t\tSalesOrder = last(SalesOrder),\n\t\tChannel = last(Channel)) ~> Deduplicated1SalesOrderSource\nDeduplicated1SalesOrderSource select(mapColumn(\n\t\tSalesOrderLine,\n\t\tSalesOrder,\n\t\tSalesOrderLineKey,\n\t\tChannel\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SalesOrder\nSales, SalesOrder join(Sales@SalesOrderLineKey === SalesOrder@SalesOrderLineKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSalesOrder\nJoinSalesOrder select(mapColumn(\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tSalesOrder,\n\t\tSales_SalesOrderLineKey_Generated = Sales@SalesOrderLineKey,\n\t\tProductKey,\n\t\tOrderQuantity,\n\t\tUnitPrice,\n\t\tTotalProductCost,\n\t\tProductStandardCost,\n\t\tSalesAmount,\n\t\tUnitPriceDiscountPct\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectJoinSalesOrder\nSelectJoinSalesOrder select(mapColumn(\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tTransactionId = SalesOrder,\n\t\tTransactionLineItemId = Sales_SalesOrderLineKey_Generated,\n\t\tProductId = ProductKey,\n\t\tQuantity = OrderQuantity,\n\t\tProductListPriceAmount = UnitPrice,\n\t\tTransactionProductPriceAmount = TotalProductCost,\n\t\tTotalTransactionLineItemAmount = ProductStandardCost,\n\t\tTotalTransactionSalesPriceAmount = SalesAmount,\n\t\tProductPriceAdjustmentPercentage = UnitPriceDiscountPct\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> TransactionLineItem\nTransactionLineItem sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'TransactionLineItem',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> TransactionLineItemSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transaction_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "SalesOrderDeltaSource"
						},
						{
							"name": "SalesSource"
						},
						{
							"name": "CustomerDataSource"
						},
						{
							"name": "ResellerSource"
						}
					],
					"sinks": [
						{
							"name": "TransactionSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1SalesOrderDeltaSource"
						},
						{
							"name": "SalesOrder"
						},
						{
							"name": "Deduplicated1SalesSource"
						},
						{
							"name": "Sales"
						},
						{
							"name": "JoinSales"
						},
						{
							"name": "Deduplicated1CustomerDataSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "JoinCustomerData"
						},
						{
							"name": "Deduplicated1ResellerSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "JoinReseller"
						},
						{
							"name": "SelectJoinReseller"
						},
						{
							"name": "Transaction"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tSalesOrderLine as string,\n\t\tSalesOrder as string,\n\t\tSalesOrderLineKey as integer,\n\t\tChannel as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'SalesOrder',\n\tmanifestType: 'manifest') ~> SalesOrderDeltaSource\nsource(output(\n\t\tSalesAmount as decimal(18,2),\n\t\tTotalProductCost as decimal(18,2),\n\t\tProductStandardCost as decimal(18,2),\n\t\tUnitPriceDiscountPct as decimal(18,2),\n\t\tExtendedAmount as decimal(18,2),\n\t\tUnitPrice as decimal(18,2),\n\t\tOrderQuantity as integer,\n\t\tSalesTerritoryKey as integer,\n\t\tShipDateKey as integer,\n\t\tDueDateKey as integer,\n\t\tOrderDateKey as integer,\n\t\tProductKey as integer,\n\t\tCustomerKey as integer,\n\t\tResellerKey as integer,\n\t\tSalesOrderLineKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Sales',\n\tmanifestType: 'manifest') ~> SalesSource\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataSource\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerSource\nSalesOrderDeltaSource aggregate(groupBy(SalesOrderLineKey),\n\tSalesOrderLine = last(SalesOrderLine),\n\t\tSalesOrder = last(SalesOrder),\n\t\tChannel = last(Channel)) ~> Deduplicated1SalesOrderDeltaSource\nDeduplicated1SalesOrderDeltaSource select(mapColumn(\n\t\tSalesOrderLine,\n\t\tSalesOrder,\n\t\tSalesOrderLineKey,\n\t\tChannel\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SalesOrder\nSalesSource aggregate(groupBy(ProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey),\n\tSalesAmount = last(SalesAmount),\n\t\tTotalProductCost = last(TotalProductCost),\n\t\tProductStandardCost = last(ProductStandardCost),\n\t\tUnitPriceDiscountPct = last(UnitPriceDiscountPct),\n\t\tExtendedAmount = last(ExtendedAmount),\n\t\tUnitPrice = last(UnitPrice),\n\t\tOrderQuantity = last(OrderQuantity),\n\t\tSalesTerritoryKey = last(SalesTerritoryKey),\n\t\tShipDateKey = last(ShipDateKey),\n\t\tDueDateKey = last(DueDateKey),\n\t\tOrderDateKey = last(OrderDateKey)) ~> Deduplicated1SalesSource\nDeduplicated1SalesSource select(mapColumn(\n\t\tSalesAmount,\n\t\tTotalProductCost,\n\t\tProductStandardCost,\n\t\tUnitPriceDiscountPct,\n\t\tExtendedAmount,\n\t\tUnitPrice,\n\t\tOrderQuantity,\n\t\tSalesTerritoryKey,\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Sales\nSalesOrder, Sales join(SalesOrder@SalesOrderLineKey === Sales@SalesOrderLineKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSales\nCustomerDataSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataSource\nDeduplicated1CustomerDataSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nJoinSales, CustomerData join(Sales@CustomerKey === CustomerData@CustomerKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinCustomerData\nResellerSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerSource\nDeduplicated1ResellerSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nJoinCustomerData, Reseller join(Sales@ResellerKey === Reseller@ResellerKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinReseller\nJoinReseller select(mapColumn(\n\t\tSalesOrder,\n\t\tCustomerData_CustomerKey_Generated = CustomerData@CustomerKey,\n\t\tReseller_ResellerKey_Generated = Reseller@ResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectJoinReseller\nSelectJoinReseller select(mapColumn(\n\t\tTransactionId = SalesOrder,\n\t\tCustomerId = CustomerData_CustomerKey_Generated,\n\t\tChannelId = Reseller_ResellerKey_Generated\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Transaction\nTransaction sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Transaction',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> TransactionSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transaction_DataFlow11')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "SalesOrderDeltaSource"
						},
						{
							"name": "SalesSource"
						},
						{
							"name": "CustomerDataSource"
						},
						{
							"name": "ResellerSource"
						}
					],
					"sinks": [
						{
							"name": "TransactionSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1SalesOrderDeltaSource"
						},
						{
							"name": "SalesOrder"
						},
						{
							"name": "Deduplicated1SalesSource"
						},
						{
							"name": "Sales"
						},
						{
							"name": "JoinSales"
						},
						{
							"name": "Deduplicated1CustomerDataSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "JoinCustomerData"
						},
						{
							"name": "Deduplicated1ResellerSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "JoinReseller"
						},
						{
							"name": "SelectJoinReseller"
						},
						{
							"name": "Transaction"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tSalesOrderLine as string,\n\t\tSalesOrder as string,\n\t\tSalesOrderLineKey as integer,\n\t\tChannel as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'SalesOrder',\n\tmanifestType: 'manifest') ~> SalesOrderDeltaSource\nsource(output(\n\t\tSalesAmount as decimal(18,2),\n\t\tTotalProductCost as decimal(18,2),\n\t\tProductStandardCost as decimal(18,2),\n\t\tUnitPriceDiscountPct as decimal(18,2),\n\t\tExtendedAmount as decimal(18,2),\n\t\tUnitPrice as decimal(18,2),\n\t\tOrderQuantity as integer,\n\t\tSalesTerritoryKey as integer,\n\t\tShipDateKey as integer,\n\t\tDueDateKey as integer,\n\t\tOrderDateKey as integer,\n\t\tProductKey as integer,\n\t\tCustomerKey as integer,\n\t\tResellerKey as integer,\n\t\tSalesOrderLineKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Sales',\n\tmanifestType: 'manifest') ~> SalesSource\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataSource\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerSource\nSalesOrderDeltaSource aggregate(groupBy(SalesOrderLineKey),\n\tSalesOrderLine = last(SalesOrderLine),\n\t\tSalesOrder = last(SalesOrder),\n\t\tChannel = last(Channel)) ~> Deduplicated1SalesOrderDeltaSource\nDeduplicated1SalesOrderDeltaSource select(mapColumn(\n\t\tSalesOrderLine,\n\t\tSalesOrder,\n\t\tSalesOrderLineKey,\n\t\tChannel\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SalesOrder\nSalesSource aggregate(groupBy(ProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey),\n\tSalesAmount = last(SalesAmount),\n\t\tTotalProductCost = last(TotalProductCost),\n\t\tProductStandardCost = last(ProductStandardCost),\n\t\tUnitPriceDiscountPct = last(UnitPriceDiscountPct),\n\t\tExtendedAmount = last(ExtendedAmount),\n\t\tUnitPrice = last(UnitPrice),\n\t\tOrderQuantity = last(OrderQuantity),\n\t\tSalesTerritoryKey = last(SalesTerritoryKey),\n\t\tShipDateKey = last(ShipDateKey),\n\t\tDueDateKey = last(DueDateKey),\n\t\tOrderDateKey = last(OrderDateKey)) ~> Deduplicated1SalesSource\nDeduplicated1SalesSource select(mapColumn(\n\t\tSalesAmount,\n\t\tTotalProductCost,\n\t\tProductStandardCost,\n\t\tUnitPriceDiscountPct,\n\t\tExtendedAmount,\n\t\tUnitPrice,\n\t\tOrderQuantity,\n\t\tSalesTerritoryKey,\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Sales\nSalesOrder, Sales join(SalesOrder@SalesOrderLineKey === Sales@SalesOrderLineKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSales\nCustomerDataSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataSource\nDeduplicated1CustomerDataSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nJoinSales, CustomerData join(Sales@CustomerKey === CustomerData@CustomerKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinCustomerData\nResellerSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerSource\nDeduplicated1ResellerSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nJoinCustomerData, Reseller join(Sales@ResellerKey === Reseller@ResellerKey,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinReseller\nJoinReseller select(mapColumn(\n\t\tSalesOrder,\n\t\tCustomerData_CustomerKey_Generated = CustomerData@CustomerKey,\n\t\tReseller_ResellerKey_Generated = Reseller@ResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectJoinReseller\nSelectJoinReseller select(mapColumn(\n\t\tTransactionId = SalesOrder,\n\t\tCustomerId = CustomerData_CustomerKey_Generated,\n\t\tChannelId = Reseller_ResellerKey_Generated\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Transaction\nTransaction sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Transaction',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> TransactionSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/samplelineage')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureSynapseAnalytics1",
								"type": "LinkedServiceReference"
							},
							"name": "advworkscustomer"
						},
						{
							"linkedService": {
								"referenceName": "AzureSynapseAnalytics1",
								"type": "LinkedServiceReference"
							},
							"name": "advworksorders"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "mdw_sampledata",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						}
					],
					"script": "source(output(\n\t\t{Customer Key} as integer,\n\t\t{WWI Customer ID} as integer,\n\t\tCustomer as string,\n\t\t{Bill To Customer} as string,\n\t\tCategory as string,\n\t\t{Buying Group} as string,\n\t\t{Primary Contact} as string,\n\t\t{Postal Code} as string,\n\t\t{Valid From} as timestamp,\n\t\t{Valid To} as timestamp,\n\t\t{Lineage Key} as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tstore: 'synapseanalytics',\n\tschemaName: 'wwi',\n\ttableName: 'dimension_Customer',\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tstaged: true) ~> advworkscustomer\nsource(output(\n\t\t{Order Key} as long,\n\t\t{City Key} as integer,\n\t\t{Customer Key} as integer,\n\t\t{Stock Item Key} as integer,\n\t\t{Order Date Key} as date,\n\t\t{Picked Date Key} as date,\n\t\t{Salesperson Key} as integer,\n\t\t{Picker Key} as integer,\n\t\t{WWI Order ID} as integer,\n\t\t{WWI Backorder ID} as integer,\n\t\tDescription as string,\n\t\tPackage as string,\n\t\tQuantity as integer,\n\t\t{Unit Price} as decimal(18,2),\n\t\t{Tax Rate} as decimal(18,3),\n\t\t{Total Excluding Tax} as decimal(18,2),\n\t\t{Tax Amount} as decimal(18,2),\n\t\t{Total Including Tax} as decimal(18,2),\n\t\t{Lineage Key} as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tstore: 'synapseanalytics',\n\tschemaName: 'wwi',\n\ttableName: 'fact_Order',\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tstaged: true) ~> advworksorders\nadvworkscustomer, advworksorders join(advworkscustomer@{Customer Key} == advworksorders@{Customer Key},\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nJoin1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'json',\n\tfileSystem: 'mdwsynapsews',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSynapseAnalytics1')]",
				"[concat(variables('workspaceId'), '/linkedServices/mdw_sampledata')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mdwcustomerdemo')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/polybase')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		}
	]
}