{
	"name": "PII detection and masking",
	"properties": {
		"description": "This dataflow will create the request body needed for Azure Cognitive Services and then use the external call transformation to detect and mask PII data with the Cognitive Services PII API. ",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "mdw_sampledata",
						"type": "LinkedServiceReference"
					},
					"name": "dataSource",
					"description": "Import data from data source"
				}
			],
			"sinks": [
				{
					"name": "sink"
				}
			],
			"transformations": [
				{
					"name": "externalCallCogServices"
				},
				{
					"name": "createRequestBody",
					"description": "Creating the columns 'kind, parameters, analysisInput, text'"
				},
				{
					"name": "flattenResults"
				}
			],
			"scriptLines": [
				"parameters{",
				"     sourceFileSystem as string ('mdwdemo'),",
				"     sourceFilePath as string ('bronze'),",
				"     sourceFileName as string ('uscaniatibronze.csv')",
				"}",
				"source(useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: ($sourceFileSystem),",
				"     folderPath: ($sourceFilePath),",
				"     fileName: ($sourceFileName),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> dataSource",
				"createRequestBody call(mapColumn(",
				"          kind,",
				"          parameters,",
				"          analysisInput",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     output(",
				"          body as (kind as string, results as (documents as (redactedText as string, id as string, entities as (text as string, category as string, offset as integer, length as integer, confidenceScore as double)[])[]))",
				"     ),",
				"     allowSchemaDrift: true) ~> externalCallCogServices",
				"dataSource derive(kind = 'PiiEntityRecognition',",
				"          parameters = @(modelVersion='latest'),",
				"          analysisInput = @(documents=array(@(id=\"1\", language=\"en\", text=concatWS(', ', name,email,phone_number,case_month,res_state,res_county,age_group,sex,race,ethnicity,process,exposure_yn,current_status,symptom_status,hosp_yn,icu_yn,icu_yn,death_yn,underlying_conditions_yn)))),",
				"          text = concatWS(', ', name,email,phone_number,case_month,res_state,res_county,age_group,sex,race,ethnicity,process,exposure_yn,current_status,symptom_status,hosp_yn,icu_yn,icu_yn,death_yn,underlying_conditions_yn)) ~> createRequestBody",
				"externalCallCogServices foldDown(unroll(body.results.documents),",
				"     mapColumn(",
				"          redactedText = body.results.documents.redactedText,",
				"          text",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenResults",
				"flattenResults sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> sink"
			]
		}
	}
}